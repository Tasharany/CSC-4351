
//----------------------------------------------------
// The following code was generated by CUP v0.10g
// Thu Apr 03 22:01:55 CDT 2025
//----------------------------------------------------

package Parse;

import java.util.ArrayList;

public class Grm extends java_cup.runtime.lr_parser {

  /** constructor */
  public Grm() {super();}

  /** production table */
  protected static final short _production_table[][] = {
        {0, 2},     {1, 1},     {1, 2},     {2, 6},     {2, 6}, 
        {3, 2},     {3, 4},     {5, 0},     {5, 2},     {6, 1}, 
        {6, 3},     {7, 3},     {7, 4},     {8, 1},     {8, 2}, 
        {9, 1},     {9, 2},     {10, 1},     {10, 2},     {11, 1}, 
        {11, 1},     {12, 1},     {12, 3},     {13, 1},     {13, 3}, 
        {35, 1},     {35, 1},     {35, 1},     {35, 1},     {37, 1}, 
        {37, 1},     {37, 1},     {37, 1},     {37, 1},     {37, 1}, 
        {38, 1},     {38, 1},     {39, 2},     {40, 1},     {40, 3}, 
        {14, 1},     {14, 1},     {14, 1},     {14, 1},     {14, 1}, 
        {14, 1},     {14, 1},     {14, 1},     {14, 1},     {14, 1}, 
        {25, 3},     {25, 3},     {25, 3},     {25, 3},     {25, 3}, 
        {25, 3},     {25, 3},     {25, 3},     {25, 3},     {25, 3}, 
        {27, 3},     {27, 2},     {16, 1},     {16, 2},     {31, 1}, 
        {31, 1},     {31, 1},     {28, 1},     {32, 1},     {22, 1}, 
        {24, 1},     {34, 4},     {34, 3},     {21, 7},     {21, 5}, 
        {33, 5},     {20, 10},     {19, 3},     {30, 4}  };

  /** access to production table */
  public short[][] production_table() {return _production_table;}

  /** parse action table */
  protected static final short[][] _action_table = {
    /*0*/{37,2,38,4,-1,0},
    /*1*/{2,-8,43,6,44,7,45,12,46,8,47,11,48,10,49,-8,50,-8,52,-8,-1,0},
    /*2*/{0,97,37,2,38,4,-1,0},
    /*3*/{2,-8,43,6,44,7,45,12,46,8,47,11,48,10,49,-8,50,-8,52,-8,-1,0},
    /*4*/{0,-2,37,-2,38,-2,-1,0},
    /*5*/{2,-30,43,-30,44,-30,45,-30,46,-30,47,-30,48,-30,49,-30,50,-30,52,-30,-1,0},
    /*6*/{2,-31,43,-31,44,-31,45,-31,46,-31,47,-31,48,-31,49,-31,50,-31,52,-31,-1,0},
    /*7*/{2,-33,43,-33,44,-33,45,-33,46,-33,47,-33,48,-33,49,-33,50,-33,52,-33,-1,0},
    /*8*/{2,15,49,17,50,18,52,19,-1,0},
    /*9*/{2,-35,43,-35,44,-35,45,-35,46,-35,47,-35,48,-35,49,-35,50,-35,52,-35,-1,0},
    /*10*/{2,-34,43,-34,44,-34,45,-34,46,-34,47,-34,48,-34,49,-34,50,-34,52,-34,-1,0},
    /*11*/{2,-32,43,-32,44,-32,45,-32,46,-32,47,-32,48,-32,49,-32,50,-32,52,-32,-1,0},
    /*12*/{2,-8,43,6,44,7,45,12,46,8,47,11,48,10,49,-8,50,-8,52,-8,-1,0},
    /*13*/{2,-9,49,-9,50,-9,52,-9,-1,0},
    /*14*/{2,-29,-1,0},
    /*15*/{2,20,-1,0},
    /*16*/{2,-26,-1,0},
    /*17*/{2,-27,-1,0},
    /*18*/{2,-28,-1,0},
    /*19*/{-1,0},
    /*20*/{8,22,-1,0},
    /*21*/{2,34,3,28,8,22,9,25,29,32,31,27,33,43,49,44,-1,0},
    /*22*/{0,-5,37,-5,38,-5,-1,0},
    /*23*/{2,-41,3,-41,7,-41,8,-41,9,-41,11,-41,13,-41,14,-41,15,-41,16,-41,18,-41,19,-41,20,-41,21,-41,22,-41,23,-41,28,-41,29,-41,30,-41,31,-41,33,-41,49,-41,-1,0},
    /*24*/{0,-62,2,-62,3,-62,7,-62,8,-62,9,-62,11,-62,13,-62,14,-62,15,-62,16,-62,18,-62,19,-62,20,-62,21,-62,22,-62,23,-62,28,-62,29,-62,30,-62,31,-62,33,-62,37,-62,38,-62,49,-62,-1,0},
    /*25*/{2,-46,3,-46,7,-46,8,-46,9,-46,11,-46,13,-46,14,-46,15,-46,16,-46,18,-46,19,-46,20,-46,21,-46,22,-46,23,-46,28,-46,29,-46,30,-46,31,-46,33,-46,49,-46,-1,0},
    /*26*/{6,93,-1,0},
    /*27*/{2,-70,3,-70,7,-70,8,-70,9,-70,11,-70,13,-70,14,-70,15,-70,16,-70,18,-70,19,-70,20,-70,21,-70,22,-70,23,-70,28,-70,29,-70,30,-70,31,-70,33,-70,49,-70,-1,0},
    /*28*/{2,-47,3,-47,7,-47,8,-47,9,-47,11,-47,13,-47,14,-47,15,-47,16,-47,18,-47,19,-47,20,-47,21,-47,22,-47,23,-47,28,-47,29,-47,30,-47,31,-47,33,-47,49,-47,-1,0},
    /*29*/{2,-45,3,-45,7,-45,8,-45,9,-45,11,-45,13,-45,14,-45,15,-45,16,-45,18,-45,19,-45,20,-45,21,-45,22,-45,23,-45,28,-45,29,-45,30,-45,31,-45,33,-45,49,-45,-1,0},
    /*30*/{2,-50,3,-50,7,-50,8,-50,9,-50,11,-50,13,-50,14,-50,15,-50,16,-50,18,-50,19,-50,20,-50,21,-50,22,-50,23,-50,28,-50,29,-50,30,-50,31,-50,33,-50,49,-50,-1,0},
    /*31*/{6,87,-1,0},
    /*32*/{2,-49,3,-49,7,-49,8,-49,9,-49,11,-49,13,-49,14,-49,15,-49,16,-49,18,-49,19,-49,20,-49,21,-49,22,-49,23,-49,28,-49,29,-49,30,-49,31,-49,33,-49,49,-49,-1,0},
    /*33*/{2,-68,3,-68,6,83,7,-68,8,-68,9,-68,10,-68,11,-68,12,-68,13,-68,14,-68,15,-68,16,-68,18,-68,19,-68,20,-68,21,-68,22,-68,23,-68,28,-68,29,-68,30,-68,31,-68,33,-68,49,-68,-1,0},
    /*34*/{2,-48,3,-48,7,-48,8,-48,9,-48,11,-48,13,-48,14,-48,15,-48,16,-48,18,-48,19,-48,20,-48,21,-48,22,-48,23,-48,28,-48,29,-48,30,-48,31,-48,33,-48,49,-48,-1,0},
    /*35*/{2,-63,3,-63,7,-63,8,-63,9,-63,13,57,14,52,15,61,16,53,18,58,19,56,20,62,21,59,22,60,23,54,29,-63,31,-63,33,-63,49,-63,-1,0},
    /*36*/{2,34,3,28,8,22,9,81,29,32,31,27,33,43,49,44,-1,0},
    /*37*/{2,-43,3,-43,7,-43,8,-43,9,-43,11,-43,13,-43,14,-43,15,-43,16,-43,18,-43,19,-43,20,-43,21,-43,22,-43,23,-43,28,-43,29,-43,30,-43,31,-43,33,-43,49,-43,-1,0},
    /*38*/{2,-44,3,-44,7,-44,8,-44,9,-44,11,-44,13,-44,14,-44,15,-44,16,-44,18,-44,19,-44,20,-44,21,-44,22,-44,23,-44,28,-44,29,-44,30,-44,31,-44,33,-44,49,-44,-1,0},
    /*39*/{2,-67,3,-67,7,-67,8,-67,9,-67,10,-67,11,-67,12,-67,13,-67,14,-67,15,-67,16,-67,18,-67,19,-67,20,-67,21,-67,22,-67,23,-67,28,-67,29,-67,30,-67,31,-67,33,-67,49,-67,-1,0},
    /*40*/{2,-69,3,-69,7,-69,8,-69,9,-69,10,76,11,-69,12,77,13,-69,14,-69,15,-69,16,-69,18,-69,19,-69,20,-69,21,-69,22,-69,23,-69,28,-69,29,-69,30,-69,31,-69,33,-69,49,-69,-1,0},
    /*41*/{2,-42,3,-42,7,-42,8,-42,9,-42,11,-42,13,-42,14,-42,15,-42,16,-42,18,-42,19,-42,20,-42,21,-42,22,-42,23,-42,28,-42,29,-42,30,-42,31,-42,33,-42,49,-42,-1,0},
    /*42*/{6,47,-1,0},
    /*43*/{2,-71,3,-71,7,-71,8,-71,9,-71,11,-71,13,-71,14,-71,15,-71,16,-71,18,-71,19,-71,20,-71,21,-71,22,-71,23,-71,28,-71,29,-71,30,-71,31,-71,33,-71,49,-71,-1,0},
    /*44*/{2,-66,3,-66,7,-66,8,-66,9,-66,10,-66,11,-66,12,-66,13,-66,14,-66,15,-66,16,-66,18,-66,19,-66,20,-66,21,-66,22,-66,23,-66,28,-66,29,-66,30,-66,31,-66,33,-66,49,-66,-1,0},
    /*45*/{2,-65,3,-65,7,-65,8,-65,9,-65,10,-65,11,-65,12,-65,13,-65,14,-65,15,-65,16,-65,18,-65,19,-65,20,-65,21,-65,22,-65,23,-65,28,-65,29,-65,30,-65,31,-65,33,-65,49,-65,-1,0},
    /*46*/{37,48,-1,0},
    /*47*/{2,49,-1,0},
    /*48*/{26,50,-1,0},
    /*49*/{2,34,3,28,8,22,29,32,31,27,33,43,49,44,-1,0},
    /*50*/{13,57,14,52,15,61,16,53,18,58,19,56,20,62,21,59,22,60,23,54,28,55,-1,0},
    /*51*/{2,34,3,28,8,22,29,32,31,27,33,43,49,44,-1,0},
    /*52*/{2,34,3,28,8,22,29,32,31,27,33,43,49,44,-1,0},
    /*53*/{2,34,3,28,8,22,29,32,31,27,33,43,49,44,-1,0},
    /*54*/{2,34,3,28,8,22,29,32,31,27,33,43,49,44,-1,0},
    /*55*/{2,34,3,28,8,22,29,32,31,27,33,43,49,44,-1,0},
    /*56*/{2,34,3,28,8,22,29,32,31,27,33,43,49,44,-1,0},
    /*57*/{2,34,3,28,8,22,29,32,31,27,33,43,49,44,-1,0},
    /*58*/{2,34,3,28,8,22,29,32,31,27,33,43,49,44,-1,0},
    /*59*/{2,34,3,28,8,22,29,32,31,27,33,43,49,44,-1,0},
    /*60*/{2,34,3,28,8,22,29,32,31,27,33,43,49,44,-1,0},
    /*61*/{2,34,3,28,8,22,29,32,31,27,33,43,49,44,-1,0},
    /*62*/{2,-57,3,-57,7,-57,8,-57,9,-57,11,-57,13,57,14,52,15,61,16,53,28,-57,29,-57,30,-57,31,-57,33,-57,49,-57,-1,0},
    /*63*/{2,-53,3,-53,7,-53,8,-53,9,-53,11,-53,13,-53,14,-53,15,-53,16,-53,18,-53,19,-53,20,-53,21,-53,22,-53,23,-53,28,-53,29,-53,30,-53,31,-53,33,-53,49,-53,-1,0},
    /*64*/{2,-59,3,-59,7,-59,8,-59,9,-59,11,-59,13,57,14,52,15,61,16,53,28,-59,29,-59,30,-59,31,-59,33,-59,49,-59,-1,0},
    /*65*/{2,-58,3,-58,7,-58,8,-58,9,-58,11,-58,13,57,14,52,15,61,16,53,28,-58,29,-58,30,-58,31,-58,33,-58,49,-58,-1,0},
    /*66*/{2,-55,3,-55,7,-55,8,-55,9,-55,11,-55,13,57,14,52,15,61,16,53,28,-55,29,-55,30,-55,31,-55,33,-55,49,-55,-1,0},
    /*67*/{2,-51,3,-51,7,-51,8,-51,9,-51,11,-51,13,-51,14,-51,15,61,16,53,18,-51,19,-51,20,-51,21,-51,22,-51,23,-51,28,-51,29,-51,30,-51,31,-51,33,-51,49,-51,-1,0},
    /*68*/{2,-56,3,-56,7,-56,8,-56,9,-56,11,-56,13,57,14,52,15,61,16,53,28,-56,29,-56,30,-56,31,-56,33,-56,49,-56,-1,0},
    /*69*/{7,71,13,57,14,52,15,61,16,53,18,58,19,56,20,62,21,59,22,60,23,54,-1,0},
    /*70*/{2,34,3,28,8,22,29,32,31,27,33,43,49,44,-1,0},
    /*71*/{2,-77,3,-77,7,-77,8,-77,9,-77,11,-77,13,57,14,52,15,61,16,53,18,58,19,56,20,62,21,59,22,60,23,54,28,-77,29,-77,30,-77,31,-77,33,-77,49,-77,-1,0},
    /*72*/{2,-60,3,-60,7,-60,8,-60,9,-60,11,-60,13,57,14,52,15,61,16,53,28,-60,29,-60,30,-60,31,-60,33,-60,49,-60,-1,0},
    /*73*/{2,-54,3,-54,7,-54,8,-54,9,-54,11,-54,13,-54,14,-54,15,-54,16,-54,18,-54,19,-54,20,-54,21,-54,22,-54,23,-54,28,-54,29,-54,30,-54,31,-54,33,-54,49,-54,-1,0},
    /*74*/{2,-52,3,-52,7,-52,8,-52,9,-52,11,-52,13,-52,14,-52,15,61,16,53,18,-52,19,-52,20,-52,21,-52,22,-52,23,-52,28,-52,29,-52,30,-52,31,-52,33,-52,49,-52,-1,0},
    /*75*/{2,34,3,28,8,22,29,32,31,27,33,43,49,44,-1,0},
    /*76*/{2,78,-1,0},
    /*77*/{2,-78,3,-78,7,-78,8,-78,9,-78,10,-78,11,-78,12,-78,13,-78,14,-78,15,-78,16,-78,18,-78,19,-78,20,-78,21,-78,22,-78,23,-78,28,-78,29,-78,30,-78,31,-78,33,-78,49,-78,-1,0},
    /*78*/{11,80,13,57,14,52,15,61,16,53,18,58,19,56,20,62,21,59,22,60,23,54,-1,0},
    /*79*/{2,-79,3,-79,7,-79,8,-79,9,-79,10,-79,11,-79,12,-79,13,-79,14,-79,15,-79,16,-79,18,-79,19,-79,20,-79,21,-79,22,-79,23,-79,28,-79,29,-79,30,-79,31,-79,33,-79,49,-79,-1,0},
    /*80*/{0,-61,2,-61,3,-61,7,-61,8,-61,9,-61,11,-61,13,-61,14,-61,15,-61,16,-61,18,-61,19,-61,20,-61,21,-61,22,-61,23,-61,28,-61,29,-61,30,-61,31,-61,33,-61,37,-61,38,-61,49,-61,-1,0},
    /*81*/{2,-64,3,-64,7,-64,8,-64,9,-64,13,57,14,52,15,61,16,53,18,58,19,56,20,62,21,59,22,60,23,54,29,-64,31,-64,33,-64,49,-64,-1,0},
    /*82*/{2,34,3,28,7,84,8,22,29,32,31,27,33,43,49,44,-1,0},
    /*83*/{2,-73,3,-73,7,-73,8,-73,9,-73,11,-73,13,-73,14,-73,15,-73,16,-73,18,-73,19,-73,20,-73,21,-73,22,-73,23,-73,28,-73,29,-73,30,-73,31,-73,33,-73,49,-73,-1,0},
    /*84*/{2,34,3,28,7,86,8,22,29,32,31,27,33,43,49,44,-1,0},
    /*85*/{2,-72,3,-72,7,-72,8,-72,9,-72,11,-72,13,-72,14,-72,15,-72,16,-72,18,-72,19,-72,20,-72,21,-72,22,-72,23,-72,28,-72,29,-72,30,-72,31,-72,33,-72,49,-72,-1,0},
    /*86*/{2,34,3,28,8,22,29,32,31,27,33,43,49,44,-1,0},
    /*87*/{7,89,13,57,14,52,15,61,16,53,18,58,19,56,20,62,21,59,22,60,23,54,-1,0},
    /*88*/{2,34,3,28,8,22,29,32,31,27,33,43,49,44,-1,0},
    /*89*/{2,-75,3,-75,7,-75,8,-75,9,-75,11,-75,13,57,14,52,15,61,16,53,18,58,19,56,20,62,21,59,22,60,23,54,28,-75,29,-75,30,91,31,-75,33,-75,49,-75,-1,0},
    /*90*/{2,34,3,28,8,22,29,32,31,27,33,43,49,44,-1,0},
    /*91*/{2,-74,3,-74,7,-74,8,-74,9,-74,11,-74,13,57,14,52,15,61,16,53,18,58,19,56,20,62,21,59,22,60,23,54,28,-74,29,-74,30,-74,31,-74,33,-74,49,-74,-1,0},
    /*92*/{2,34,3,28,8,22,29,32,31,27,33,43,49,44,-1,0},
    /*93*/{7,95,13,57,14,52,15,61,16,53,18,58,19,56,20,62,21,59,22,60,23,54,-1,0},
    /*94*/{2,34,3,28,8,22,29,32,31,27,33,43,49,44,-1,0},
    /*95*/{2,-76,3,-76,7,-76,8,-76,9,-76,11,-76,13,57,14,52,15,61,16,53,18,58,19,56,20,62,21,59,22,60,23,54,28,-76,29,-76,30,-76,31,-76,33,-76,49,-76,-1,0},
    /*96*/{0,-1,-1,0},
    /*97*/{0,-3,37,-3,38,-3,-1,0},
    /*98*/{2,15,49,17,50,18,52,19,-1,0},
    /*99*/{2,101,-1,0},
    /*100*/{-1,0},
    /*101*/{4,103,-1,0},
    /*102*/{0,-4,37,-4,38,-4,-1,0},
  };

  /** access to parse action table */
  public short[][] action_table() {return _action_table;}

  /** reduce_goto table */
  protected static final short[][] _reduce_table = {
    /*0*/{1,2,2,4,-1,-1},
    /*1*/{5,98,37,12,-1,-1},
    /*2*/{2,97,-1,-1},
    /*3*/{5,8,37,12,-1,-1},
    /*4*/{-1,-1},
    /*5*/{-1,-1},
    /*6*/{-1,-1},
    /*7*/{-1,-1},
    /*8*/{35,15,-1,-1},
    /*9*/{-1,-1},
    /*10*/{-1,-1},
    /*11*/{-1,-1},
    /*12*/{5,13,37,12,-1,-1},
    /*13*/{-1,-1},
    /*14*/{-1,-1},
    /*15*/{-1,-1},
    /*16*/{-1,-1},
    /*17*/{-1,-1},
    /*18*/{-1,-1},
    /*19*/{17,20,-1,-1},
    /*20*/{27,22,-1,-1},
    /*21*/{14,35,16,36,19,44,20,34,21,25,22,23,24,30,25,38,27,32,28,45,29,41,30,39,31,40,32,37,33,28,34,29,-1,-1},
    /*22*/{-1,-1},
    /*23*/{-1,-1},
    /*24*/{-1,-1},
    /*25*/{-1,-1},
    /*26*/{-1,-1},
    /*27*/{-1,-1},
    /*28*/{-1,-1},
    /*29*/{-1,-1},
    /*30*/{-1,-1},
    /*31*/{-1,-1},
    /*32*/{-1,-1},
    /*33*/{-1,-1},
    /*34*/{-1,-1},
    /*35*/{-1,-1},
    /*36*/{14,81,19,44,20,34,21,25,22,23,24,30,25,38,27,32,28,45,29,41,30,39,31,40,32,37,33,28,34,29,-1,-1},
    /*37*/{-1,-1},
    /*38*/{-1,-1},
    /*39*/{-1,-1},
    /*40*/{-1,-1},
    /*41*/{-1,-1},
    /*42*/{-1,-1},
    /*43*/{-1,-1},
    /*44*/{-1,-1},
    /*45*/{-1,-1},
    /*46*/{-1,-1},
    /*47*/{-1,-1},
    /*48*/{-1,-1},
    /*49*/{14,50,19,44,20,34,21,25,22,23,24,30,25,38,27,32,28,45,29,41,30,39,31,40,32,37,33,28,34,29,-1,-1},
    /*50*/{-1,-1},
    /*51*/{14,74,19,44,20,34,21,25,22,23,24,30,25,38,27,32,28,45,29,41,30,39,31,40,32,37,33,28,34,29,-1,-1},
    /*52*/{14,73,19,44,20,34,21,25,22,23,24,30,25,38,27,32,28,45,29,41,30,39,31,40,32,37,33,28,34,29,-1,-1},
    /*53*/{14,72,19,44,20,34,21,25,22,23,24,30,25,38,27,32,28,45,29,41,30,39,31,40,32,37,33,28,34,29,-1,-1},
    /*54*/{14,69,19,44,20,34,21,25,22,23,24,30,25,38,27,32,28,45,29,41,30,39,31,40,32,37,33,28,34,29,-1,-1},
    /*55*/{14,68,19,44,20,34,21,25,22,23,24,30,25,38,27,32,28,45,29,41,30,39,31,40,32,37,33,28,34,29,-1,-1},
    /*56*/{14,67,19,44,20,34,21,25,22,23,24,30,25,38,27,32,28,45,29,41,30,39,31,40,32,37,33,28,34,29,-1,-1},
    /*57*/{14,66,19,44,20,34,21,25,22,23,24,30,25,38,27,32,28,45,29,41,30,39,31,40,32,37,33,28,34,29,-1,-1},
    /*58*/{14,65,19,44,20,34,21,25,22,23,24,30,25,38,27,32,28,45,29,41,30,39,31,40,32,37,33,28,34,29,-1,-1},
    /*59*/{14,64,19,44,20,34,21,25,22,23,24,30,25,38,27,32,28,45,29,41,30,39,31,40,32,37,33,28,34,29,-1,-1},
    /*60*/{14,63,19,44,20,34,21,25,22,23,24,30,25,38,27,32,28,45,29,41,30,39,31,40,32,37,33,28,34,29,-1,-1},
    /*61*/{14,62,19,44,20,34,21,25,22,23,24,30,25,38,27,32,28,45,29,41,30,39,31,40,32,37,33,28,34,29,-1,-1},
    /*62*/{-1,-1},
    /*63*/{-1,-1},
    /*64*/{-1,-1},
    /*65*/{-1,-1},
    /*66*/{-1,-1},
    /*67*/{-1,-1},
    /*68*/{-1,-1},
    /*69*/{-1,-1},
    /*70*/{14,71,19,44,20,34,21,25,22,23,24,30,25,38,27,32,28,45,29,41,30,39,31,40,32,37,33,28,34,29,-1,-1},
    /*71*/{-1,-1},
    /*72*/{-1,-1},
    /*73*/{-1,-1},
    /*74*/{-1,-1},
    /*75*/{14,78,19,44,20,34,21,25,22,23,24,30,25,38,27,32,28,45,29,41,30,39,31,40,32,37,33,28,34,29,-1,-1},
    /*76*/{-1,-1},
    /*77*/{-1,-1},
    /*78*/{-1,-1},
    /*79*/{-1,-1},
    /*80*/{-1,-1},
    /*81*/{-1,-1},
    /*82*/{14,35,16,84,19,44,20,34,21,25,22,23,24,30,25,38,27,32,28,45,29,41,30,39,31,40,32,37,33,28,34,29,-1,-1},
    /*83*/{-1,-1},
    /*84*/{14,81,19,44,20,34,21,25,22,23,24,30,25,38,27,32,28,45,29,41,30,39,31,40,32,37,33,28,34,29,-1,-1},
    /*85*/{-1,-1},
    /*86*/{14,87,19,44,20,34,21,25,22,23,24,30,25,38,27,32,28,45,29,41,30,39,31,40,32,37,33,28,34,29,-1,-1},
    /*87*/{-1,-1},
    /*88*/{14,89,19,44,20,34,21,25,22,23,24,30,25,38,27,32,28,45,29,41,30,39,31,40,32,37,33,28,34,29,-1,-1},
    /*89*/{-1,-1},
    /*90*/{14,91,19,44,20,34,21,25,22,23,24,30,25,38,27,32,28,45,29,41,30,39,31,40,32,37,33,28,34,29,-1,-1},
    /*91*/{-1,-1},
    /*92*/{14,93,19,44,20,34,21,25,22,23,24,30,25,38,27,32,28,45,29,41,30,39,31,40,32,37,33,28,34,29,-1,-1},
    /*93*/{-1,-1},
    /*94*/{14,95,19,44,20,34,21,25,22,23,24,30,25,38,27,32,28,45,29,41,30,39,31,40,32,37,33,28,34,29,-1,-1},
    /*95*/{-1,-1},
    /*96*/{-1,-1},
    /*97*/{-1,-1},
    /*98*/{35,99,-1,-1},
    /*99*/{-1,-1},
    /*100*/{15,101,-1,-1},
    /*101*/{-1,-1},
    /*102*/{-1,-1},
  };

  /** access to reduce_goto table */
  public short[][] reduce_table() {return _reduce_table;}

  /** instance of action encapsulation class */
  protected CUP$Grm$actions action_obj;

  /** action encapsulation object initializer */
  protected void init_actions()
    {
      action_obj = new CUP$Grm$actions();
    }

  /** invoke a user supplied parse action */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Grm$do_action(act_num, parser, stack, top);
  }

  /** start state */
  public int start_state() {return 0;}
  /** start production */
  public int start_production() {return 0;}

  /** EOF Symbol index */
  public int EOF_sym() {return 0;}

  /** error Symbol index */
  public int error_sym() {return 1;}


  /** scan to get the next Symbol */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return lexer.nextToken(); 
    }


    Lexer lexer;

    public void syntax_error(java_cup.runtime.Symbol current) {
        report_error("Syntax error (" + current.sym + ")", current);
    }

    ErrorMsg.ErrorMsg errorMsg;

    public void report_error(String message, java_cup.runtime.Symbol info) {
        errorMsg.error(info.left, message);
    }

    public Grm(Lexer l, ErrorMsg.ErrorMsg err) {
        this();
        errorMsg=err;
        lexer=l;
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Grm$actions {


    static Symbol.Symbol sym(String s) {
        return Symbol.Symbol.symbol(s);
    }


  /** Constructor */
  CUP$Grm$actions() { }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Grm$do_action(
    int                        CUP$Grm$act_num,
    java_cup.runtime.lr_parser CUP$Grm$parser,
    java.util.Stack            CUP$Grm$stack,
    int                        CUP$Grm$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Grm$result;

      /* select the action based on the action number */
      switch (CUP$Grm$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // array_subscript ::= variable LBRACK expression RBRACK 
            {
              Absyn.SubscriptVar RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).right;
		Absyn.Var v = (Absyn.Var)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Absyn.Exp e = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		 RESULT = new Absyn.SubscriptVar(vleft, v, e); 
              CUP$Grm$result = new java_cup.runtime.Symbol(30/*array_subscript*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // field_var ::= variable DOT ID 
            {
              Absyn.FieldVar RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Var v = (Absyn.Var)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.FieldVar(vleft, v, Symbol.Symbol.symbol(i)); 
              CUP$Grm$result = new java_cup.runtime.Symbol(19/*field_var*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // for_statement ::= FOR LPAREN VAR ID ASSIGN expression TO expression RPAREN expression 
            {
              Absyn.ForExp RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-9)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-9)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-9)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-6)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-6)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).right;
		Absyn.Exp i = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-4)).value;
		int hileft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int hiright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp hi = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp body = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 Absyn.VarDec var = new Absyn.VarDec(nleft, Symbol.Symbol.symbol(n),
                                          new Absyn.NameTy(nleft, Symbol.Symbol.symbol("int")), i);
       RESULT = new Absyn.ForExp(fleft, var, hi, body); 
              CUP$Grm$result = new java_cup.runtime.Symbol(20/*for_statement*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-9)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // while_statement ::= WHILE LPAREN expression RPAREN expression 
            {
              Absyn.WhileExp RESULT = null;
		int wleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).right;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-4)).value;
		int testleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int testright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp test = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp body = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.WhileExp(wleft, test, body); 
              CUP$Grm$result = new java_cup.runtime.Symbol(33/*while_statement*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // if_statement ::= IF LPAREN expression RPAREN expression 
            {
              Absyn.IfExp RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-4)).value;
		int testleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int testright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp test = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int thenleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int thenright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp then = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.IfExp(ileft, test, then); 
              CUP$Grm$result = new java_cup.runtime.Symbol(21/*if_statement*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // if_statement ::= IF LPAREN expression RPAREN expression ELSE expression 
            {
              Absyn.IfExp RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-6)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-6)).value;
		int testleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).left;
		int testright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).right;
		Absyn.Exp test = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-4)).value;
		int thenleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int thenright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp then = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int else_expleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int else_expright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp else_exp = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.IfExp(ileft, test, then, else_exp); 
              CUP$Grm$result = new java_cup.runtime.Symbol(21/*if_statement*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-6)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // function_call ::= ID LPAREN RPAREN 
            {
              Absyn.CallExp RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		 RESULT = new Absyn.CallExp(ileft, Symbol.Symbol.symbol(i), null); 
              CUP$Grm$result = new java_cup.runtime.Symbol(34/*function_call*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // function_call ::= ID LPAREN expression_list RPAREN 
            {
              Absyn.CallExp RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-3)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Absyn.ExpList el = (Absyn.ExpList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		 RESULT = new Absyn.CallExp(ileft, Symbol.Symbol.symbol(i), el); 
              CUP$Grm$result = new java_cup.runtime.Symbol(34/*function_call*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // nil_expression ::= VOID 
            {
              Absyn.NilExp RESULT = null;
		 RESULT = new Absyn.NilExp(0); 
              CUP$Grm$result = new java_cup.runtime.Symbol(24/*nil_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // integer_literal ::= DECIMAL_LITERAL 
            {
              Absyn.IntExp RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.IntExp(nleft, n); 
              CUP$Grm$result = new java_cup.runtime.Symbol(22/*integer_literal*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // variable_expression ::= variable 
            {
              Absyn.VarExp RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Var v = (Absyn.Var)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.VarExp(vleft, v); 
              CUP$Grm$result = new java_cup.runtime.Symbol(32/*variable_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // simple_variable ::= ID 
            {
              Absyn.SimpleVar RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.SimpleVar(ileft, Symbol.Symbol.symbol(i)); 
              CUP$Grm$result = new java_cup.runtime.Symbol(28/*simple_variable*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // variable ::= array_subscript 
            {
              Absyn.Var RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.SubscriptVar v = (Absyn.SubscriptVar)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = v; 
              CUP$Grm$result = new java_cup.runtime.Symbol(31/*variable*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // variable ::= field_var 
            {
              Absyn.Var RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.FieldVar v = (Absyn.FieldVar)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = v; 
              CUP$Grm$result = new java_cup.runtime.Symbol(31/*variable*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // variable ::= simple_variable 
            {
              Absyn.Var RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.SimpleVar v = (Absyn.SimpleVar)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = v; 
              CUP$Grm$result = new java_cup.runtime.Symbol(31/*variable*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // expression_list ::= expression_list expression 
            {
              Absyn.ExpList RESULT = null;
		int elleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Absyn.ExpList el = (Absyn.ExpList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.ExpList(e, el); 
              CUP$Grm$result = new java_cup.runtime.Symbol(16/*expression_list*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // expression_list ::= expression 
            {
              Absyn.ExpList RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.ExpList(e, null); 
              CUP$Grm$result = new java_cup.runtime.Symbol(16/*expression_list*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // compound_statement ::= LBRACE RBRACE 
            {
              Absyn.SeqExp RESULT = null;
		 RESULT = new Absyn.SeqExp(0, null); 
              CUP$Grm$result = new java_cup.runtime.Symbol(27/*compound_statement*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // compound_statement ::= LBRACE expression_list RBRACE 
            {
              Absyn.SeqExp RESULT = null;
		int elleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Absyn.ExpList el = (Absyn.ExpList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		 RESULT = new Absyn.SeqExp(elleft, el); 
              CUP$Grm$result = new java_cup.runtime.Symbol(27/*compound_statement*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // operator_expression ::= expression GE expression 
            {
              Absyn.OpExp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp e1 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int geleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int geright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Object ge = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e2 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.OpExp(geleft, e1, Absyn.OpExp.GE, e2); 
              CUP$Grm$result = new java_cup.runtime.Symbol(25/*operator_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // operator_expression ::= expression GT expression 
            {
              Absyn.OpExp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp e1 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int gtleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int gtright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Object gt = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e2 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.OpExp(gtleft, e1, Absyn.OpExp.GT, e2); 
              CUP$Grm$result = new java_cup.runtime.Symbol(25/*operator_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // operator_expression ::= expression LE expression 
            {
              Absyn.OpExp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp e1 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int leleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int leright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Object le = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e2 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.OpExp(leleft, e1, Absyn.OpExp.LE, e2); 
              CUP$Grm$result = new java_cup.runtime.Symbol(25/*operator_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // operator_expression ::= expression LT expression 
            {
              Absyn.OpExp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp e1 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int ltleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int ltright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Object lt = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e2 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.OpExp(ltleft, e1, Absyn.OpExp.LT, e2); 
              CUP$Grm$result = new java_cup.runtime.Symbol(25/*operator_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // operator_expression ::= expression NEQ expression 
            {
              Absyn.OpExp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp e1 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int neleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int neright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Object ne = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e2 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.OpExp(neleft, e1, Absyn.OpExp.NE, e2); 
              CUP$Grm$result = new java_cup.runtime.Symbol(25/*operator_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // operator_expression ::= expression EQ expression 
            {
              Absyn.OpExp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp e1 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int eqleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int eqright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Object eq = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e2 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.OpExp(eqleft, e1, Absyn.OpExp.EQ, e2); 
              CUP$Grm$result = new java_cup.runtime.Symbol(25/*operator_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // operator_expression ::= expression DIVIDE expression 
            {
              Absyn.OpExp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp e1 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e2 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.OpExp(dleft, e1, Absyn.OpExp.DIV, e2); 
              CUP$Grm$result = new java_cup.runtime.Symbol(25/*operator_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // operator_expression ::= expression TIMES expression 
            {
              Absyn.OpExp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp e1 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e2 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.OpExp(tleft, e1, Absyn.OpExp.MUL, e2); 
              CUP$Grm$result = new java_cup.runtime.Symbol(25/*operator_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // operator_expression ::= expression MINUS expression 
            {
              Absyn.OpExp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp e1 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e2 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.OpExp(mleft, e1, Absyn.OpExp.MINUS, e2); 
              CUP$Grm$result = new java_cup.runtime.Symbol(25/*operator_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // operator_expression ::= expression PLUS expression 
            {
              Absyn.OpExp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp e1 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e2 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.OpExp(pleft, e1, Absyn.OpExp.PLUS, e2); 
              CUP$Grm$result = new java_cup.runtime.Symbol(25/*operator_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expression ::= nil_expression 
            {
              Absyn.Exp RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.NilExp n = (Absyn.NilExp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = n; 
              CUP$Grm$result = new java_cup.runtime.Symbol(14/*expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expression ::= compound_statement 
            {
              Absyn.Exp RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.SeqExp c = (Absyn.SeqExp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = c; 
              CUP$Grm$result = new java_cup.runtime.Symbol(14/*expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expression ::= for_statement 
            {
              Absyn.Exp RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.ForExp f = (Absyn.ForExp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = f; 
              CUP$Grm$result = new java_cup.runtime.Symbol(14/*expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expression ::= while_statement 
            {
              Absyn.Exp RESULT = null;
		int wleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.WhileExp w = (Absyn.WhileExp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = w; 
              CUP$Grm$result = new java_cup.runtime.Symbol(14/*expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expression ::= if_statement 
            {
              Absyn.Exp RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.IfExp i = (Absyn.IfExp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = i; 
              CUP$Grm$result = new java_cup.runtime.Symbol(14/*expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // expression ::= function_call 
            {
              Absyn.Exp RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.CallExp f = (Absyn.CallExp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = f; 
              CUP$Grm$result = new java_cup.runtime.Symbol(14/*expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expression ::= operator_expression 
            {
              Absyn.Exp RESULT = null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.OpExp o = (Absyn.OpExp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = o; 
              CUP$Grm$result = new java_cup.runtime.Symbol(14/*expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expression ::= variable_expression 
            {
              Absyn.Exp RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.VarExp v = (Absyn.VarExp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = v; 
              CUP$Grm$result = new java_cup.runtime.Symbol(14/*expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expression ::= string_literal 
            {
              Absyn.Exp RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.StringExp s = (Absyn.StringExp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = s; 
              CUP$Grm$result = new java_cup.runtime.Symbol(14/*expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expression ::= integer_literal 
            {
              Absyn.Exp RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.IntExp i = (Absyn.IntExp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = i; 
              CUP$Grm$result = new java_cup.runtime.Symbol(14/*expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // enumerator ::= ID ASSIGN expression 
            {
              String RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = i + "=" + e.toString(); 
              CUP$Grm$result = new java_cup.runtime.Symbol(40/*enumerator*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // enumerator ::= ID 
            {
              String RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = i; 
              CUP$Grm$result = new java_cup.runtime.Symbol(40/*enumerator*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // empty_array_type ::= LBRACK RBRACK 
            {
              String RESULT = null;
		 RESULT = "[]"; 
              CUP$Grm$result = new java_cup.runtime.Symbol(39/*empty_array_type*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // struct_or_union ::= UNION 
            {
              String RESULT = null;
		 RESULT = "union"; 
              CUP$Grm$result = new java_cup.runtime.Symbol(38/*struct_or_union*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // struct_or_union ::= STRUCT 
            {
              String RESULT = null;
		 RESULT = "struct"; 
              CUP$Grm$result = new java_cup.runtime.Symbol(38/*struct_or_union*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // bitfield_value ::= REGISTER 
            {
              String RESULT = null;
		 RESULT = "register"; 
              CUP$Grm$result = new java_cup.runtime.Symbol(37/*bitfield_value*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // bitfield_value ::= AUTO 
            {
              String RESULT = null;
		 RESULT = "auto"; 
              CUP$Grm$result = new java_cup.runtime.Symbol(37/*bitfield_value*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // bitfield_value ::= STATIC 
            {
              String RESULT = null;
		 RESULT = "static"; 
              CUP$Grm$result = new java_cup.runtime.Symbol(37/*bitfield_value*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // bitfield_value ::= EXTERN 
            {
              String RESULT = null;
		 RESULT = "extern"; 
              CUP$Grm$result = new java_cup.runtime.Symbol(37/*bitfield_value*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // bitfield_value ::= VOLATILE 
            {
              String RESULT = null;
		 RESULT = "volatile"; 
              CUP$Grm$result = new java_cup.runtime.Symbol(37/*bitfield_value*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // bitfield_value ::= CONST 
            {
              String RESULT = null;
		 RESULT = "const"; 
              CUP$Grm$result = new java_cup.runtime.Symbol(37/*bitfield_value*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // type_name ::= ID 
            {
              Absyn.NameTy RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.NameTy(0, Symbol.Symbol.symbol(i)); 
              CUP$Grm$result = new java_cup.runtime.Symbol(35/*type_name*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // type_name ::= INT 
            {
              Absyn.NameTy RESULT = null;
		 RESULT = new Absyn.NameTy(0, Symbol.Symbol.symbol("int")); 
              CUP$Grm$result = new java_cup.runtime.Symbol(35/*type_name*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // type_name ::= CHAR 
            {
              Absyn.NameTy RESULT = null;
		 RESULT = new Absyn.NameTy(0, Symbol.Symbol.symbol("char")); 
              CUP$Grm$result = new java_cup.runtime.Symbol(35/*type_name*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // type_name ::= VOID 
            {
              Absyn.NameTy RESULT = null;
		 RESULT = new Absyn.NameTy(0, Symbol.Symbol.symbol("void")); 
              CUP$Grm$result = new java_cup.runtime.Symbol(35/*type_name*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // enumerator_list ::= enumerator_list COMMA enumerator 
            {
              ArrayList RESULT = null;
		int elleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		ArrayList el = (ArrayList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 el.add(e);
       RESULT = el; 
              CUP$Grm$result = new java_cup.runtime.Symbol(13/*enumerator_list*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // enumerator_list ::= enumerator 
            {
              ArrayList RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 ArrayList<String> list = new ArrayList<>();
       list.add(e);
       RESULT = list; 
              CUP$Grm$result = new java_cup.runtime.Symbol(13/*enumerator_list*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // parameter_type_list ::= parameter_type_list COMMA type_name 
            {
              ArrayList RESULT = null;
		int plleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		ArrayList pl = (ArrayList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.NameTy t = (Absyn.NameTy)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 pl.add(t);
       RESULT = pl; 
              CUP$Grm$result = new java_cup.runtime.Symbol(12/*parameter_type_list*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // parameter_type_list ::= type_name 
            {
              ArrayList RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.NameTy t = (Absyn.NameTy)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 ArrayList<Absyn.NameTy> list = new ArrayList<>();
       list.add(t);
       RESULT = list; 
              CUP$Grm$result = new java_cup.runtime.Symbol(12/*parameter_type_list*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // brackets_list ::= expression_array_type_list 
            {
              ArrayList RESULT = null;
		int elleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		ArrayList el = (ArrayList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = el; 
              CUP$Grm$result = new java_cup.runtime.Symbol(11/*brackets_list*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // brackets_list ::= empty_array_type_list 
            {
              ArrayList RESULT = null;
		int elleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		ArrayList el = (ArrayList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = el; 
              CUP$Grm$result = new java_cup.runtime.Symbol(11/*brackets_list*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // pointer_list ::= pointer_list TIMES 
            {
              ArrayList RESULT = null;
		int plleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		ArrayList pl = (ArrayList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		 pl.add(1);
       RESULT = pl; 
              CUP$Grm$result = new java_cup.runtime.Symbol(10/*pointer_list*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // pointer_list ::= TIMES 
            {
              ArrayList RESULT = null;
		 ArrayList<Integer> list = new ArrayList<>();
       list.add(1);
       RESULT = list; 
              CUP$Grm$result = new java_cup.runtime.Symbol(10/*pointer_list*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // expression_array_type_list ::= expression_array_type_list expression 
            {
              ArrayList RESULT = null;
		int elleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		ArrayList el = (ArrayList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 el.add(e);
       RESULT = el; 
              CUP$Grm$result = new java_cup.runtime.Symbol(9/*expression_array_type_list*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // expression_array_type_list ::= expression 
            {
              ArrayList RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 ArrayList<Absyn.Exp> list = new ArrayList<>();
       list.add(e);
       RESULT = list; 
              CUP$Grm$result = new java_cup.runtime.Symbol(9/*expression_array_type_list*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // empty_array_type_list ::= empty_array_type_list empty_array_type 
            {
              ArrayList RESULT = null;
		int elleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		ArrayList el = (ArrayList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 el.add(e);
       RESULT = el; 
              CUP$Grm$result = new java_cup.runtime.Symbol(8/*empty_array_type_list*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // empty_array_type_list ::= empty_array_type 
            {
              ArrayList RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 ArrayList<String> list = new ArrayList<>();
       list.add(e);
       RESULT = list; 
              CUP$Grm$result = new java_cup.runtime.Symbol(8/*empty_array_type_list*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // struct_declaration_list ::= struct_declaration_list type_name ID SEMICOLON 
            {
              ArrayList RESULT = null;
		int slleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).right;
		ArrayList sl = (ArrayList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.NameTy t = (Absyn.NameTy)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		 sl.add(new Absyn.Field(tleft, Symbol.Symbol.symbol(n), t.name, null));
       RESULT = sl; 
              CUP$Grm$result = new java_cup.runtime.Symbol(7/*struct_declaration_list*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // struct_declaration_list ::= type_name ID SEMICOLON 
            {
              ArrayList RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.NameTy t = (Absyn.NameTy)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		 ArrayList<Absyn.Field> list = new ArrayList<>();
       list.add(new Absyn.Field(tleft, Symbol.Symbol.symbol(n), t.name, null));
       RESULT = list; 
              CUP$Grm$result = new java_cup.runtime.Symbol(7/*struct_declaration_list*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // initializer_list ::= initializer_list COMMA expression 
            {
              ArrayList RESULT = null;
		int illeft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int ilright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		ArrayList il = (ArrayList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp i = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 il.add(i);
       RESULT = il; 
              CUP$Grm$result = new java_cup.runtime.Symbol(6/*initializer_list*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // initializer_list ::= expression 
            {
              ArrayList RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp i = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 ArrayList<Absyn.Exp> list = new ArrayList<>();
       list.add(i);
       RESULT = list; 
              CUP$Grm$result = new java_cup.runtime.Symbol(6/*initializer_list*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // bitfield_list ::= bitfield_value bitfield_list 
            {
              ArrayList RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		ArrayList l = (ArrayList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 l.add(0, v);
       RESULT = l; 
              CUP$Grm$result = new java_cup.runtime.Symbol(5/*bitfield_list*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // bitfield_list ::= 
            {
              ArrayList RESULT = null;
		 RESULT = new ArrayList<>(); 
              CUP$Grm$result = new java_cup.runtime.Symbol(5/*bitfield_list*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // parameter_list ::= parameter_list COMMA type_name ID 
            {
              ArrayList RESULT = null;
		int plleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).right;
		ArrayList pl = (ArrayList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Absyn.NameTy t = (Absyn.NameTy)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 pl.add(new Absyn.Field(tleft, Symbol.Symbol.symbol(n), t.name, null));
       RESULT = pl; 
              CUP$Grm$result = new java_cup.runtime.Symbol(3/*parameter_list*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // parameter_list ::= type_name ID 
            {
              ArrayList RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Absyn.NameTy t = (Absyn.NameTy)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 ArrayList<Absyn.Field> list = new ArrayList<>();
       list.add(new Absyn.Field(tleft, Symbol.Symbol.symbol(n), t.name, null));
       RESULT = list; 
              CUP$Grm$result = new java_cup.runtime.Symbol(3/*parameter_list*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // declaration ::= FUN bitfield_list type_name ID parameters compound_statement 
            {
              Absyn.Dec RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).right;
		ArrayList b = (ArrayList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-4)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).right;
		Absyn.NameTy r = (Absyn.NameTy)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Absyn.FieldList p = (Absyn.FieldList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.SeqExp c = (Absyn.SeqExp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.FunctionDec(fleft, Symbol.Symbol.symbol(n), p, r, c, null); 
              CUP$Grm$result = new java_cup.runtime.Symbol(2/*declaration*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // declaration ::= VAR bitfield_list type_name ID initialization SEMICOLON 
            {
              Absyn.Dec RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).right;
		ArrayList b = (ArrayList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).right;
		Absyn.NameTy t = (Absyn.NameTy)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Absyn.Exp i = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		 RESULT = new Absyn.VarDec(vleft, Symbol.Symbol.symbol(n), t, i); 
              CUP$Grm$result = new java_cup.runtime.Symbol(2/*declaration*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // declaration_list ::= declaration_list declaration 
            {
              Absyn.DecList RESULT = null;
		int dlleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int dlright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Absyn.DecList dl = (Absyn.DecList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Dec d = (Absyn.Dec)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.DecList(d, dl); 
              CUP$Grm$result = new java_cup.runtime.Symbol(1/*declaration_list*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // declaration_list ::= declaration 
            {
              Absyn.DecList RESULT = null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Dec d = (Absyn.Dec)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.DecList(d, null); 
              CUP$Grm$result = new java_cup.runtime.Symbol(1/*declaration_list*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= declaration_list EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Absyn.DecList start_val = (Absyn.DecList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		RESULT = start_val;
              CUP$Grm$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$Grm$parser.done_parsing();
          return CUP$Grm$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

