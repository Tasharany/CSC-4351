
//----------------------------------------------------
// The following code was generated by CUP v0.10g
// Thu Apr 03 21:28:17 CDT 2025
//----------------------------------------------------

package Parse;

import java.util.ArrayList;

public class Grm extends java_cup.runtime.lr_parser {

  /** constructor */
  public Grm() {super();}

  /** production table */
  protected static final short _production_table[][] = {
        {0, 2},     {1, 1},     {1, 2},     {2, 6},     {2, 6}, 
        {2, 6},     {2, 4},     {2, 3},     {2, 5},     {3, 0}, 
        {3, 2},     {34, 1},     {34, 1},     {34, 1},     {34, 1}, 
        {34, 1},     {34, 1},     {5, 1},     {6, 2},     {6, 1}, 
        {7, 1},     {7, 1},     {7, 1},     {7, 1},     {7, 1}, 
        {7, 1},     {7, 1},     {7, 2},     {7, 1},     {9, 0}, 
        {9, 2},     {50, 1},     {50, 1},     {50, 2},     {48, 1}, 
        {48, 2},     {49, 1},     {49, 1},     {44, 1},     {44, 2}, 
        {45, 2},     {25, 3},     {25, 2},     {10, 1},     {10, 2}, 
        {46, 1},     {46, 2},     {47, 3},     {12, 3},     {12, 5}, 
        {12, 2},     {4, 2},     {4, 4},     {13, 3},     {13, 5}, 
        {13, 2},     {51, 1},     {51, 3},     {41, 1},     {41, 3}, 
        {42, 1},     {42, 3},     {35, 1},     {35, 1},     {36, 3}, 
        {43, 3},     {43, 4},     {37, 1},     {37, 3},     {38, 1}, 
        {38, 3},     {39, 1},     {40, 3},     {40, 1},     {8, 1}, 
        {8, 1},     {8, 1},     {8, 1},     {8, 1},     {8, 1}, 
        {8, 1},     {8, 1},     {8, 1},     {21, 3},     {21, 3}, 
        {21, 3},     {21, 3},     {21, 3},     {21, 3},     {21, 3}, 
        {21, 3},     {21, 3},     {21, 3},     {21, 3},     {21, 3}, 
        {21, 3},     {17, 7},     {17, 5},     {33, 5},     {15, 9}, 
        {30, 1},     {30, 1},     {30, 1},     {26, 1},     {18, 1}, 
        {20, 1},     {52, 4},     {52, 3}  };

  /** access to production table */
  public short[][] production_table() {return _production_table;}

  /** parse action table */
  protected static final short[][] _action_table = {
    /*0*/{35,8,36,5,37,9,38,7,39,6,40,2,-1,0},
    /*1*/{2,180,-1,0},
    /*2*/{2,24,-1,0},
    /*3*/{0,-2,35,-2,36,-2,37,-2,38,-2,39,-2,40,-2,-1,0},
    /*4*/{2,-10,40,-10,41,116,42,115,43,121,44,119,45,120,46,118,47,-10,48,-10,49,-10,50,-10,51,-10,52,-10,53,-10,-1,0},
    /*5*/{2,-64,-1,0},
    /*6*/{2,-63,-1,0},
    /*7*/{2,-10,40,-10,41,116,42,115,43,121,44,119,45,120,46,118,47,-10,48,-10,49,-10,50,-10,51,-10,52,-10,53,-10,-1,0},
    /*8*/{2,19,40,13,47,17,48,22,49,23,50,14,51,16,52,21,53,18,-1,0},
    /*9*/{0,12,35,8,36,5,37,9,38,7,39,6,40,2,-1,0},
    /*10*/{0,-3,35,-3,36,-3,37,-3,38,-3,39,-3,40,-3,-1,0},
    /*11*/{0,-1,-1,0},
    /*12*/{2,114,-1,0},
    /*13*/{2,-24,5,-24,7,-24,10,-24,14,-24,-1,0},
    /*14*/{2,-20,5,-20,7,-20,10,35,14,34,-1,0},
    /*15*/{2,-25,5,-25,7,-25,10,-25,14,-25,-1,0},
    /*16*/{2,-21,5,-21,7,-21,10,-21,14,-21,-1,0},
    /*17*/{2,-27,5,-27,7,-27,10,-27,14,-27,-1,0},
    /*18*/{2,-29,5,-29,7,-29,10,-29,14,-29,-1,0},
    /*19*/{2,24,-1,0},
    /*20*/{2,-26,5,-26,7,-26,10,-26,14,-26,-1,0},
    /*21*/{2,-22,5,-22,7,-22,10,-22,14,-22,-1,0},
    /*22*/{2,-23,5,-23,7,-23,10,-23,14,-23,-1,0},
    /*23*/{4,-18,5,-18,6,-18,7,-18,8,-18,25,-18,-1,0},
    /*24*/{4,26,-1,0},
    /*25*/{0,-7,35,-7,36,-7,37,-7,38,-7,39,-7,40,-7,-1,0},
    /*26*/{2,-39,5,-39,7,-39,10,-39,-1,0},
    /*27*/{2,-32,5,-32,7,-32,10,35,14,113,-1,0},
    /*28*/{2,-46,5,-46,7,-46,10,-46,-1,0},
    /*29*/{2,-33,5,-33,7,-33,-1,0},
    /*30*/{2,-19,5,-19,7,-19,-1,0},
    /*31*/{2,-38,5,-38,7,-38,10,111,-1,0},
    /*32*/{2,-37,5,-37,7,-37,10,108,-1,0},
    /*33*/{2,-35,5,-35,7,-35,10,-35,14,-35,-1,0},
    /*34*/{2,45,3,40,11,36,27,44,29,39,31,53,47,54,-1,0},
    /*35*/{2,-41,5,-41,7,-41,10,-41,-1,0},
    /*36*/{2,-75,3,-75,4,-75,5,-75,7,-75,9,-75,11,-75,12,-75,13,-75,14,-75,15,-75,16,-75,17,-75,18,-75,19,-75,20,-75,21,-75,22,-75,23,-75,24,-75,27,-75,28,-75,29,-75,31,-75,47,-75,-1,0},
    /*37*/{2,-80,3,-80,4,-80,5,-80,7,-80,9,-80,11,-80,12,-80,13,-80,14,-80,15,-80,16,-80,17,-80,18,-80,19,-80,20,-80,21,-80,22,-80,23,-80,24,-80,27,-80,28,-80,29,-80,31,-80,47,-80,-1,0},
    /*38*/{6,104,-1,0},
    /*39*/{2,-105,3,-105,4,-105,5,-105,7,-105,9,-105,11,-105,12,-105,13,-105,14,-105,15,-105,16,-105,17,-105,18,-105,19,-105,20,-105,21,-105,22,-105,23,-105,24,-105,27,-105,28,-105,29,-105,31,-105,47,-105,-1,0},
    /*40*/{2,-81,3,-81,4,-81,5,-81,7,-81,9,-81,11,-81,12,-81,13,-81,14,-81,15,-81,16,-81,17,-81,18,-81,19,-81,20,-81,21,-81,22,-81,23,-81,24,-81,27,-81,28,-81,29,-81,31,-81,47,-81,-1,0},
    /*41*/{2,-79,3,-79,4,-79,5,-79,7,-79,9,-79,11,-79,12,-79,13,-79,14,-79,15,-79,16,-79,17,-79,18,-79,19,-79,20,-79,21,-79,22,-79,23,-79,24,-79,27,-79,28,-79,29,-79,31,-79,47,-79,-1,0},
    /*42*/{2,-83,3,-83,4,-83,5,-83,7,-83,9,-83,11,-83,12,-83,13,-83,14,-83,15,-83,16,-83,17,-83,18,-83,19,-83,20,-83,21,-83,22,-83,23,-83,24,-83,27,-83,28,-83,29,-83,31,-83,47,-83,-1,0},
    /*43*/{6,98,-1,0},
    /*44*/{2,-104,3,-104,4,-104,5,-104,6,92,7,-104,9,-104,11,-104,12,-104,13,-104,14,-104,15,-104,16,-104,17,-104,18,-104,19,-104,20,-104,21,-104,22,-104,23,-104,24,-104,25,-104,27,-104,28,-104,29,-104,31,-104,47,-104,-1,0},
    /*45*/{2,-82,3,-82,4,-82,5,-82,7,-82,9,-82,11,-82,12,-82,13,-82,14,-82,15,-82,16,-82,17,-82,18,-82,19,-82,20,-82,21,-82,22,-82,23,-82,24,-82,27,-82,28,-82,29,-82,31,-82,47,-82,-1,0},
    /*46*/{5,-72,9,-72,11,-72,12,65,13,59,14,70,15,62,16,61,17,66,18,64,19,71,20,67,21,68,22,63,23,60,24,72,-1,0},
    /*47*/{2,-78,3,-78,4,-78,5,-78,7,-78,9,-78,11,-78,12,-78,13,-78,14,-78,15,-78,16,-78,17,-78,18,-78,19,-78,20,-78,21,-78,22,-78,23,-78,24,-78,27,-78,28,-78,29,-78,31,-78,47,-78,-1,0},
    /*48*/{2,-103,3,-103,4,-103,5,-103,7,-103,9,-103,11,-103,12,-103,13,-103,14,-103,15,-103,16,-103,17,-103,18,-103,19,-103,20,-103,21,-103,22,-103,23,-103,24,-103,25,-103,27,-103,28,-103,29,-103,31,-103,47,-103,-1,0},
    /*49*/{2,-77,3,-77,4,-77,5,-77,7,-77,9,-77,11,-77,12,-77,13,-77,14,-77,15,-77,16,-77,17,-77,18,-77,19,-77,20,-77,21,-77,22,-77,23,-77,24,-77,27,-77,28,-77,29,-77,31,-77,47,-77,-1,0},
    /*50*/{11,91,-1,0},
    /*51*/{2,-76,3,-76,4,-76,5,-76,7,-76,9,-76,11,-76,12,-76,13,-76,14,-76,15,-76,16,-76,17,-76,18,-76,19,-76,20,-76,21,-76,22,-76,23,-76,24,-76,27,-76,28,-76,29,-76,31,-76,47,-76,-1,0},
    /*52*/{6,57,-1,0},
    /*53*/{2,-106,3,-106,4,-106,5,-106,7,-106,9,-106,11,-106,12,-106,13,-106,14,-106,15,-106,16,-106,17,-106,18,-106,19,-106,20,-106,21,-106,22,-106,23,-106,24,-106,27,-106,28,-106,29,-106,31,-106,47,-106,-1,0},
    /*54*/{2,-102,3,-102,4,-102,5,-102,7,-102,9,-102,11,-102,12,-102,13,-102,14,-102,15,-102,16,-102,17,-102,18,-102,19,-102,20,-102,21,-102,22,-102,23,-102,24,-102,25,-102,27,-102,28,-102,29,-102,31,-102,47,-102,-1,0},
    /*55*/{2,-101,3,-101,4,-101,5,-101,7,-101,9,-101,11,-101,12,-101,13,-101,14,-101,15,-101,16,-101,17,-101,18,-101,19,-101,20,-101,21,-101,22,-101,23,-101,24,-101,25,-101,27,-101,28,-101,29,-101,31,-101,47,-101,-1,0},
    /*56*/{2,45,3,40,27,44,29,39,31,53,47,54,-1,0},
    /*57*/{4,69,12,65,13,59,14,70,15,62,16,61,17,66,18,64,19,71,20,67,21,68,22,63,23,60,24,72,-1,0},
    /*58*/{2,45,3,40,27,44,29,39,31,53,47,54,-1,0},
    /*59*/{2,45,3,40,27,44,29,39,31,53,47,54,-1,0},
    /*60*/{2,45,3,40,27,44,29,39,31,53,47,54,-1,0},
    /*61*/{2,45,3,40,27,44,29,39,31,53,47,54,-1,0},
    /*62*/{2,45,3,40,27,44,29,39,31,53,47,54,-1,0},
    /*63*/{2,45,3,40,27,44,29,39,31,53,47,54,-1,0},
    /*64*/{2,45,3,40,27,44,29,39,31,53,47,54,-1,0},
    /*65*/{2,45,3,40,27,44,29,39,31,53,47,54,-1,0},
    /*66*/{2,45,3,40,27,44,29,39,31,53,47,54,-1,0},
    /*67*/{2,45,3,40,27,44,29,39,31,53,47,54,-1,0},
    /*68*/{2,45,3,40,27,44,29,39,31,53,47,54,-1,0},
    /*69*/{2,45,3,40,27,44,29,39,31,53,47,54,-1,0},
    /*70*/{2,45,3,40,27,44,29,39,31,53,47,54,-1,0},
    /*71*/{2,45,3,40,27,44,29,39,31,53,47,54,-1,0},
    /*72*/{2,-96,3,-96,4,-96,5,-96,7,-96,9,-96,11,-96,12,65,13,59,14,70,15,62,16,61,17,66,18,64,19,71,20,67,21,68,22,63,23,60,24,-96,27,-96,28,-96,29,-96,31,-96,47,-96,-1,0},
    /*73*/{2,-91,3,-91,4,-91,5,-91,7,-91,9,-91,11,-91,12,65,13,59,14,70,15,62,16,61,23,-91,24,-91,27,-91,28,-91,29,-91,31,-91,47,-91,-1,0},
    /*74*/{2,-86,3,-86,4,-86,5,-86,7,-86,9,-86,11,-86,12,-86,13,-86,14,-86,15,-86,16,-86,17,-86,18,-86,19,-86,20,-86,21,-86,22,-86,23,-86,24,-86,27,-86,28,-86,29,-86,31,-86,47,-86,-1,0},
    /*75*/{4,77,12,65,13,59,14,70,15,62,16,61,17,66,18,64,19,71,20,67,21,68,22,63,23,60,24,72,-1,0},
    /*76*/{2,45,3,40,27,44,29,39,31,53,47,54,-1,0},
    /*77*/{7,79,12,65,13,59,14,70,15,62,16,61,17,66,18,64,19,71,20,67,21,68,22,63,23,60,24,72,-1,0},
    /*78*/{2,45,3,40,27,44,29,39,31,53,47,54,-1,0},
    /*79*/{2,-100,3,-100,4,-100,5,-100,7,-100,9,-100,11,-100,12,65,13,59,14,70,15,62,16,61,17,66,18,64,19,71,20,67,21,68,22,63,23,60,24,72,27,-100,28,-100,29,-100,31,-100,47,-100,-1,0},
    /*80*/{2,-93,3,-93,4,-93,5,-93,7,-93,9,-93,11,-93,12,65,13,59,14,70,15,62,16,61,23,-93,24,-93,27,-93,28,-93,29,-93,31,-93,47,-93,-1,0},
    /*81*/{2,-92,3,-92,4,-92,5,-92,7,-92,9,-92,11,-92,12,65,13,59,14,70,15,62,16,61,23,-92,24,-92,27,-92,28,-92,29,-92,31,-92,47,-92,-1,0},
    /*82*/{2,-89,3,-89,4,-89,5,-89,7,-89,9,-89,11,-89,12,65,13,59,14,70,15,62,16,61,23,-89,24,-89,27,-89,28,-89,29,-89,31,-89,47,-89,-1,0},
    /*83*/{2,-84,3,-84,4,-84,5,-84,7,-84,9,-84,11,-84,12,-84,13,-84,14,70,15,62,16,61,17,-84,18,-84,19,-84,20,-84,21,-84,22,-84,23,-84,24,-84,27,-84,28,-84,29,-84,31,-84,47,-84,-1,0},
    /*84*/{2,-90,3,-90,4,-90,5,-90,7,-90,9,-90,11,-90,12,65,13,59,14,70,15,62,16,61,23,-90,24,-90,27,-90,28,-90,29,-90,31,-90,47,-90,-1,0},
    /*85*/{2,-94,3,-94,4,-94,5,-94,7,-94,9,-94,11,-94,12,65,13,59,14,70,15,62,16,61,23,-94,24,-94,27,-94,28,-94,29,-94,31,-94,47,-94,-1,0},
    /*86*/{2,-87,3,-87,4,-87,5,-87,7,-87,9,-87,11,-87,12,-87,13,-87,14,-87,15,-87,16,-87,17,-87,18,-87,19,-87,20,-87,21,-87,22,-87,23,-87,24,-87,27,-87,28,-87,29,-87,31,-87,47,-87,-1,0},
    /*87*/{2,-88,3,-88,4,-88,5,-88,7,-88,9,-88,11,-88,12,-88,13,-88,14,-88,15,-88,16,-88,17,-88,18,-88,19,-88,20,-88,21,-88,22,-88,23,-88,24,-88,27,-88,28,-88,29,-88,31,-88,47,-88,-1,0},
    /*88*/{2,-95,3,-95,4,-95,5,-95,7,-95,9,-95,11,-95,12,65,13,59,14,70,15,62,16,61,17,66,18,64,19,71,20,67,21,68,22,63,23,-95,24,-95,27,-95,28,-95,29,-95,31,-95,47,-95,-1,0},
    /*89*/{2,-85,3,-85,4,-85,5,-85,7,-85,9,-85,11,-85,12,-85,13,-85,14,70,15,62,16,61,17,-85,18,-85,19,-85,20,-85,21,-85,22,-85,23,-85,24,-85,27,-85,28,-85,29,-85,31,-85,47,-85,-1,0},
    /*90*/{2,-48,5,-48,7,-48,10,-48,-1,0},
    /*91*/{2,45,3,40,7,93,27,44,29,39,31,53,47,54,-1,0},
    /*92*/{2,-108,3,-108,4,-108,5,-108,7,-108,9,-108,11,-108,12,-108,13,-108,14,-108,15,-108,16,-108,17,-108,18,-108,19,-108,20,-108,21,-108,22,-108,23,-108,24,-108,27,-108,28,-108,29,-108,31,-108,47,-108,-1,0},
    /*93*/{2,-44,3,-44,7,-44,9,-44,12,65,13,59,14,70,15,62,16,61,17,66,18,64,19,71,20,67,21,68,22,63,23,60,24,72,27,-44,29,-44,31,-44,47,-44,-1,0},
    /*94*/{2,45,3,40,7,96,27,44,29,39,31,53,47,54,-1,0},
    /*95*/{2,-107,3,-107,4,-107,5,-107,7,-107,9,-107,11,-107,12,-107,13,-107,14,-107,15,-107,16,-107,17,-107,18,-107,19,-107,20,-107,21,-107,22,-107,23,-107,24,-107,27,-107,28,-107,29,-107,31,-107,47,-107,-1,0},
    /*96*/{2,-45,3,-45,7,-45,9,-45,12,65,13,59,14,70,15,62,16,61,17,66,18,64,19,71,20,67,21,68,22,63,23,60,24,72,27,-45,29,-45,31,-45,47,-45,-1,0},
    /*97*/{2,45,3,40,27,44,29,39,31,53,47,54,-1,0},
    /*98*/{7,100,12,65,13,59,14,70,15,62,16,61,17,66,18,64,19,71,20,67,21,68,22,63,23,60,24,72,-1,0},
    /*99*/{2,45,3,40,27,44,29,39,31,53,47,54,-1,0},
    /*100*/{2,-98,3,-98,4,-98,5,-98,7,-98,9,-98,11,-98,12,65,13,59,14,70,15,62,16,61,17,66,18,64,19,71,20,67,21,68,22,63,23,60,24,72,27,-98,28,102,29,-98,31,-98,47,-98,-1,0},
    /*101*/{2,45,3,40,27,44,29,39,31,53,47,54,-1,0},
    /*102*/{2,-97,3,-97,4,-97,5,-97,7,-97,9,-97,11,-97,12,65,13,59,14,70,15,62,16,61,17,66,18,64,19,71,20,67,21,68,22,63,23,60,24,72,27,-97,28,-97,29,-97,31,-97,47,-97,-1,0},
    /*103*/{2,45,3,40,27,44,29,39,31,53,47,54,-1,0},
    /*104*/{7,106,12,65,13,59,14,70,15,62,16,61,17,66,18,64,19,71,20,67,21,68,22,63,23,60,24,72,-1,0},
    /*105*/{2,45,3,40,27,44,29,39,31,53,47,54,-1,0},
    /*106*/{2,-99,3,-99,4,-99,5,-99,7,-99,9,-99,11,-99,12,65,13,59,14,70,15,62,16,61,17,66,18,64,19,71,20,67,21,68,22,63,23,60,24,72,27,-99,28,-99,29,-99,31,-99,47,-99,-1,0},
    /*107*/{11,36,-1,0},
    /*108*/{2,-40,5,-40,7,-40,10,-40,-1,0},
    /*109*/{2,-47,5,-47,7,-47,10,-47,-1,0},
    /*110*/{2,45,3,40,27,44,29,39,31,53,47,54,-1,0},
    /*111*/{2,-34,5,-34,7,-34,-1,0},
    /*112*/{2,-36,5,-36,7,-36,10,-36,14,-36,-1,0},
    /*113*/{2,-28,5,-28,7,-28,10,-28,14,-28,-1,0},
    /*114*/{2,-13,40,-13,41,-13,42,-13,43,-13,44,-13,45,-13,46,-13,47,-13,48,-13,49,-13,50,-13,51,-13,52,-13,53,-13,-1,0},
    /*115*/{2,-12,40,-12,41,-12,42,-12,43,-12,44,-12,45,-12,46,-12,47,-12,48,-12,49,-12,50,-12,51,-12,52,-12,53,-12,-1,0},
    /*116*/{2,19,40,13,47,17,48,22,49,23,50,14,51,16,52,21,53,18,-1,0},
    /*117*/{2,-17,40,-17,41,-17,42,-17,43,-17,44,-17,45,-17,46,-17,47,-17,48,-17,49,-17,50,-17,51,-17,52,-17,53,-17,-1,0},
    /*118*/{2,-15,40,-15,41,-15,42,-15,43,-15,44,-15,45,-15,46,-15,47,-15,48,-15,49,-15,50,-15,51,-15,52,-15,53,-15,-1,0},
    /*119*/{2,-16,40,-16,41,-16,42,-16,43,-16,44,-16,45,-16,46,-16,47,-16,48,-16,49,-16,50,-16,51,-16,52,-16,53,-16,-1,0},
    /*120*/{2,-14,40,-14,41,-14,42,-14,43,-14,44,-14,45,-14,46,-14,47,-14,48,-14,49,-14,50,-14,51,-14,52,-14,53,-14,-1,0},
    /*121*/{2,-10,40,-10,41,116,42,115,43,121,44,119,45,120,46,118,47,-10,48,-10,49,-10,50,-10,51,-10,52,-10,53,-10,-1,0},
    /*122*/{2,-11,40,-11,47,-11,48,-11,49,-11,50,-11,51,-11,52,-11,53,-11,-1,0},
    /*123*/{2,24,-1,0},
    /*124*/{4,-30,25,127,-1,0},
    /*125*/{4,140,-1,0},
    /*126*/{2,45,3,40,8,129,27,44,29,39,31,53,47,54,-1,0},
    /*127*/{4,-59,5,-59,9,-59,-1,0},
    /*128*/{2,45,3,40,8,129,27,44,29,39,31,53,47,54,-1,0},
    /*129*/{4,-74,5,-74,9,-74,12,65,13,59,14,70,15,62,16,61,17,66,18,64,19,71,20,67,21,68,22,63,23,60,24,72,-1,0},
    /*130*/{4,-77,5,-77,9,-77,12,-77,13,-77,14,-77,15,-77,16,-77,17,-77,18,-77,19,-77,20,-77,21,-77,22,-77,23,-77,24,-77,25,133,-1,0},
    /*131*/{4,-31,-1,0},
    /*132*/{2,45,3,40,27,44,29,39,31,53,47,54,-1,0},
    /*133*/{4,-73,5,-73,9,-73,12,65,13,59,14,70,15,62,16,61,17,66,18,64,19,71,20,67,21,68,22,63,23,60,24,72,-1,0},
    /*134*/{5,137,9,138,-1,0},
    /*135*/{5,-61,9,-61,-1,0},
    /*136*/{2,45,3,40,8,129,27,44,29,39,31,53,47,54,-1,0},
    /*137*/{4,-60,5,-60,9,-60,-1,0},
    /*138*/{5,-62,9,-62,-1,0},
    /*139*/{0,-4,35,-4,36,-4,37,-4,38,-4,39,-4,40,-4,-1,0},
    /*140*/{2,19,40,13,47,17,48,22,49,23,50,14,51,16,52,21,53,18,-1,0},
    /*141*/{2,24,-1,0},
    /*142*/{6,146,-1,0},
    /*143*/{4,168,-1,0},
    /*144*/{8,163,-1,0},
    /*145*/{2,19,7,148,40,13,47,17,48,22,49,23,50,14,51,16,52,21,53,18,-1,0},
    /*146*/{2,24,5,-57,7,-57,-1,0},
    /*147*/{4,-56,8,-51,-1,0},
    /*148*/{5,157,7,158,-1,0},
    /*149*/{5,151,7,152,-1,0},
    /*150*/{2,19,26,154,40,13,47,17,48,22,49,23,50,14,51,16,52,21,53,18,-1,0},
    /*151*/{8,-49,-1,0},
    /*152*/{2,24,-1,0},
    /*153*/{7,155,-1,0},
    /*154*/{8,-50,-1,0},
    /*155*/{5,-53,7,-53,-1,0},
    /*156*/{2,19,26,160,40,13,47,17,48,22,49,23,50,14,51,16,52,21,53,18,-1,0},
    /*157*/{4,-54,-1,0},
    /*158*/{5,-58,7,-58,-1,0},
    /*159*/{7,161,-1,0},
    /*160*/{4,-55,-1,0},
    /*161*/{5,-52,7,-52,-1,0},
    /*162*/{2,45,3,40,9,165,27,44,29,39,31,53,47,54,-1,0},
    /*163*/{0,-5,35,-5,36,-5,37,-5,38,-5,39,-5,40,-5,-1,0},
    /*164*/{0,-43,35,-43,36,-43,37,-43,38,-43,39,-43,40,-43,-1,0},
    /*165*/{2,45,3,40,9,167,27,44,29,39,31,53,47,54,-1,0},
    /*166*/{0,-42,35,-42,36,-42,37,-42,38,-42,39,-42,40,-42,-1,0},
    /*167*/{0,-6,35,-6,36,-6,37,-6,38,-6,39,-6,40,-6,-1,0},
    /*168*/{8,170,-1,0},
    /*169*/{2,19,40,13,47,17,48,22,49,23,50,14,51,16,52,21,53,18,-1,0},
    /*170*/{0,-8,35,-8,36,-8,37,-8,38,-8,39,-8,40,-8,-1,0},
    /*171*/{2,19,9,177,40,13,47,17,48,22,49,23,50,14,51,16,52,21,53,18,-1,0},
    /*172*/{2,24,-1,0},
    /*173*/{4,175,-1,0},
    /*174*/{2,-66,9,-66,40,-66,47,-66,48,-66,49,-66,50,-66,51,-66,52,-66,53,-66,-1,0},
    /*175*/{2,24,-1,0},
    /*176*/{0,-65,35,-65,36,-65,37,-65,38,-65,39,-65,40,-65,-1,0},
    /*177*/{4,179,-1,0},
    /*178*/{2,-67,9,-67,40,-67,47,-67,48,-67,49,-67,50,-67,51,-67,52,-67,53,-67,-1,0},
    /*179*/{8,181,-1,0},
    /*180*/{2,182,-1,0},
    /*181*/{5,-70,9,-70,25,188,-1,0},
    /*182*/{5,185,9,186,-1,0},
    /*183*/{5,-68,9,-68,-1,0},
    /*184*/{2,182,-1,0},
    /*185*/{0,-9,35,-9,36,-9,37,-9,38,-9,39,-9,40,-9,-1,0},
    /*186*/{5,-69,9,-69,-1,0},
    /*187*/{2,45,3,40,27,44,29,39,31,53,47,54,-1,0},
    /*188*/{5,-71,9,-71,-1,0},
  };

  /** access to parse action table */
  public short[][] action_table() {return _action_table;}

  /** reduce_goto table */
  protected static final short[][] _reduce_table = {
    /*0*/{1,9,2,3,35,2,-1,-1},
    /*1*/{-1,-1},
    /*2*/{5,168,-1,-1},
    /*3*/{-1,-1},
    /*4*/{3,140,34,121,-1,-1},
    /*5*/{-1,-1},
    /*6*/{-1,-1},
    /*7*/{3,116,34,121,-1,-1},
    /*8*/{6,19,7,14,-1,-1},
    /*9*/{2,10,35,2,-1,-1},
    /*10*/{-1,-1},
    /*11*/{-1,-1},
    /*12*/{-1,-1},
    /*13*/{-1,-1},
    /*14*/{44,32,45,26,46,31,47,28,48,27,49,29,50,30,-1,-1},
    /*15*/{-1,-1},
    /*16*/{-1,-1},
    /*17*/{-1,-1},
    /*18*/{-1,-1},
    /*19*/{5,24,-1,-1},
    /*20*/{-1,-1},
    /*21*/{-1,-1},
    /*22*/{-1,-1},
    /*23*/{-1,-1},
    /*24*/{-1,-1},
    /*25*/{-1,-1},
    /*26*/{-1,-1},
    /*27*/{44,32,45,26,46,31,47,28,49,111,-1,-1},
    /*28*/{-1,-1},
    /*29*/{-1,-1},
    /*30*/{-1,-1},
    /*31*/{47,109,-1,-1},
    /*32*/{45,108,-1,-1},
    /*33*/{-1,-1},
    /*34*/{8,46,14,54,15,45,17,37,18,36,20,42,21,47,26,55,27,51,28,48,30,49,33,40,39,50,52,41,-1,-1},
    /*35*/{-1,-1},
    /*36*/{-1,-1},
    /*37*/{-1,-1},
    /*38*/{-1,-1},
    /*39*/{-1,-1},
    /*40*/{-1,-1},
    /*41*/{-1,-1},
    /*42*/{-1,-1},
    /*43*/{-1,-1},
    /*44*/{-1,-1},
    /*45*/{-1,-1},
    /*46*/{-1,-1},
    /*47*/{-1,-1},
    /*48*/{-1,-1},
    /*49*/{-1,-1},
    /*50*/{-1,-1},
    /*51*/{-1,-1},
    /*52*/{-1,-1},
    /*53*/{-1,-1},
    /*54*/{-1,-1},
    /*55*/{-1,-1},
    /*56*/{8,57,14,54,15,45,17,37,18,36,20,42,21,47,26,55,27,51,28,48,30,49,33,40,52,41,-1,-1},
    /*57*/{-1,-1},
    /*58*/{8,89,14,54,15,45,17,37,18,36,20,42,21,47,26,55,27,51,28,48,30,49,33,40,52,41,-1,-1},
    /*59*/{8,88,14,54,15,45,17,37,18,36,20,42,21,47,26,55,27,51,28,48,30,49,33,40,52,41,-1,-1},
    /*60*/{8,87,14,54,15,45,17,37,18,36,20,42,21,47,26,55,27,51,28,48,30,49,33,40,52,41,-1,-1},
    /*61*/{8,86,14,54,15,45,17,37,18,36,20,42,21,47,26,55,27,51,28,48,30,49,33,40,52,41,-1,-1},
    /*62*/{8,85,14,54,15,45,17,37,18,36,20,42,21,47,26,55,27,51,28,48,30,49,33,40,52,41,-1,-1},
    /*63*/{8,84,14,54,15,45,17,37,18,36,20,42,21,47,26,55,27,51,28,48,30,49,33,40,52,41,-1,-1},
    /*64*/{8,83,14,54,15,45,17,37,18,36,20,42,21,47,26,55,27,51,28,48,30,49,33,40,52,41,-1,-1},
    /*65*/{8,82,14,54,15,45,17,37,18,36,20,42,21,47,26,55,27,51,28,48,30,49,33,40,52,41,-1,-1},
    /*66*/{8,81,14,54,15,45,17,37,18,36,20,42,21,47,26,55,27,51,28,48,30,49,33,40,52,41,-1,-1},
    /*67*/{8,80,14,54,15,45,17,37,18,36,20,42,21,47,26,55,27,51,28,48,30,49,33,40,52,41,-1,-1},
    /*68*/{8,75,14,54,15,45,17,37,18,36,20,42,21,47,26,55,27,51,28,48,30,49,33,40,52,41,-1,-1},
    /*69*/{8,74,14,54,15,45,17,37,18,36,20,42,21,47,26,55,27,51,28,48,30,49,33,40,52,41,-1,-1},
    /*70*/{8,73,14,54,15,45,17,37,18,36,20,42,21,47,26,55,27,51,28,48,30,49,33,40,52,41,-1,-1},
    /*71*/{8,72,14,54,15,45,17,37,18,36,20,42,21,47,26,55,27,51,28,48,30,49,33,40,52,41,-1,-1},
    /*72*/{-1,-1},
    /*73*/{-1,-1},
    /*74*/{-1,-1},
    /*75*/{-1,-1},
    /*76*/{8,77,14,54,15,45,17,37,18,36,20,42,21,47,26,55,27,51,28,48,30,49,33,40,52,41,-1,-1},
    /*77*/{-1,-1},
    /*78*/{8,79,14,54,15,45,17,37,18,36,20,42,21,47,26,55,27,51,28,48,30,49,33,40,52,41,-1,-1},
    /*79*/{-1,-1},
    /*80*/{-1,-1},
    /*81*/{-1,-1},
    /*82*/{-1,-1},
    /*83*/{-1,-1},
    /*84*/{-1,-1},
    /*85*/{-1,-1},
    /*86*/{-1,-1},
    /*87*/{-1,-1},
    /*88*/{-1,-1},
    /*89*/{-1,-1},
    /*90*/{-1,-1},
    /*91*/{8,93,10,94,14,54,15,45,17,37,18,36,20,42,21,47,26,55,27,51,28,48,30,49,33,40,52,41,-1,-1},
    /*92*/{-1,-1},
    /*93*/{-1,-1},
    /*94*/{8,96,14,54,15,45,17,37,18,36,20,42,21,47,26,55,27,51,28,48,30,49,33,40,52,41,-1,-1},
    /*95*/{-1,-1},
    /*96*/{-1,-1},
    /*97*/{8,98,14,54,15,45,17,37,18,36,20,42,21,47,26,55,27,51,28,48,30,49,33,40,52,41,-1,-1},
    /*98*/{-1,-1},
    /*99*/{8,100,14,54,15,45,17,37,18,36,20,42,21,47,26,55,27,51,28,48,30,49,33,40,52,41,-1,-1},
    /*100*/{-1,-1},
    /*101*/{8,102,14,54,15,45,17,37,18,36,20,42,21,47,26,55,27,51,28,48,30,49,33,40,52,41,-1,-1},
    /*102*/{-1,-1},
    /*103*/{8,104,14,54,15,45,17,37,18,36,20,42,21,47,26,55,27,51,28,48,30,49,33,40,52,41,-1,-1},
    /*104*/{-1,-1},
    /*105*/{8,106,14,54,15,45,17,37,18,36,20,42,21,47,26,55,27,51,28,48,30,49,33,40,52,41,-1,-1},
    /*106*/{-1,-1},
    /*107*/{-1,-1},
    /*108*/{-1,-1},
    /*109*/{-1,-1},
    /*110*/{8,46,14,54,15,45,17,37,18,36,20,42,21,47,26,55,27,51,28,48,30,49,33,40,39,50,52,41,-1,-1},
    /*111*/{-1,-1},
    /*112*/{-1,-1},
    /*113*/{-1,-1},
    /*114*/{-1,-1},
    /*115*/{-1,-1},
    /*116*/{6,123,7,14,-1,-1},
    /*117*/{-1,-1},
    /*118*/{-1,-1},
    /*119*/{-1,-1},
    /*120*/{-1,-1},
    /*121*/{3,122,34,121,-1,-1},
    /*122*/{-1,-1},
    /*123*/{5,124,-1,-1},
    /*124*/{9,125,-1,-1},
    /*125*/{-1,-1},
    /*126*/{8,129,14,54,15,45,17,37,18,36,20,42,21,47,26,55,27,51,28,48,30,130,33,40,40,127,41,131,52,41,-1,-1},
    /*127*/{-1,-1},
    /*128*/{8,129,14,54,15,45,17,37,18,36,20,42,21,47,26,55,27,51,28,48,30,130,33,40,40,127,41,135,42,134,52,41,-1,-1},
    /*129*/{-1,-1},
    /*130*/{-1,-1},
    /*131*/{-1,-1},
    /*132*/{8,133,14,54,15,45,17,37,18,36,20,42,21,47,26,55,27,51,28,48,30,49,33,40,52,41,-1,-1},
    /*133*/{-1,-1},
    /*134*/{-1,-1},
    /*135*/{-1,-1},
    /*136*/{8,129,14,54,15,45,17,37,18,36,20,42,21,47,26,55,27,51,28,48,30,130,33,40,40,127,41,138,52,41,-1,-1},
    /*137*/{-1,-1},
    /*138*/{-1,-1},
    /*139*/{-1,-1},
    /*140*/{6,141,7,14,-1,-1},
    /*141*/{5,142,-1,-1},
    /*142*/{12,144,13,143,-1,-1},
    /*143*/{-1,-1},
    /*144*/{25,163,-1,-1},
    /*145*/{4,149,6,146,7,14,51,148,-1,-1},
    /*146*/{5,161,-1,-1},
    /*147*/{-1,-1},
    /*148*/{-1,-1},
    /*149*/{-1,-1},
    /*150*/{6,152,7,14,-1,-1},
    /*151*/{-1,-1},
    /*152*/{5,155,-1,-1},
    /*153*/{-1,-1},
    /*154*/{-1,-1},
    /*155*/{-1,-1},
    /*156*/{6,158,7,14,-1,-1},
    /*157*/{-1,-1},
    /*158*/{-1,-1},
    /*159*/{-1,-1},
    /*160*/{-1,-1},
    /*161*/{-1,-1},
    /*162*/{8,93,10,165,14,54,15,45,17,37,18,36,20,42,21,47,26,55,27,51,28,48,30,49,33,40,52,41,-1,-1},
    /*163*/{-1,-1},
    /*164*/{-1,-1},
    /*165*/{8,96,14,54,15,45,17,37,18,36,20,42,21,47,26,55,27,51,28,48,30,49,33,40,52,41,-1,-1},
    /*166*/{-1,-1},
    /*167*/{-1,-1},
    /*168*/{36,170,-1,-1},
    /*169*/{6,172,7,14,43,171,-1,-1},
    /*170*/{-1,-1},
    /*171*/{6,175,7,14,-1,-1},
    /*172*/{5,173,-1,-1},
    /*173*/{-1,-1},
    /*174*/{-1,-1},
    /*175*/{5,177,-1,-1},
    /*176*/{-1,-1},
    /*177*/{-1,-1},
    /*178*/{-1,-1},
    /*179*/{-1,-1},
    /*180*/{37,182,38,183,-1,-1},
    /*181*/{-1,-1},
    /*182*/{-1,-1},
    /*183*/{-1,-1},
    /*184*/{38,186,-1,-1},
    /*185*/{-1,-1},
    /*186*/{-1,-1},
    /*187*/{8,46,14,54,15,45,17,37,18,36,20,42,21,47,26,55,27,51,28,48,30,49,33,40,39,188,52,41,-1,-1},
    /*188*/{-1,-1},
  };

  /** access to reduce_goto table */
  public short[][] reduce_table() {return _reduce_table;}

  /** instance of action encapsulation class */
  protected CUP$Grm$actions action_obj;

  /** action encapsulation object initializer */
  protected void init_actions()
    {
      action_obj = new CUP$Grm$actions();
    }

  /** invoke a user supplied parse action */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Grm$do_action(act_num, parser, stack, top);
  }

  /** start state */
  public int start_state() {return 0;}
  /** start production */
  public int start_production() {return 0;}

  /** EOF Symbol index */
  public int EOF_sym() {return 0;}

  /** error Symbol index */
  public int error_sym() {return 1;}


  /** scan to get the next Symbol */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return lexer.nextToken(); 
    }


    Lexer lexer;

    public void syntax_error(java_cup.runtime.Symbol current) {
        report_error("Syntax error (" + current.sym + ")", current);
    }

    ErrorMsg.ErrorMsg errorMsg;

    public void report_error(String message, java_cup.runtime.Symbol info) {
        errorMsg.error(info.left, message);
    }

    public Grm(Lexer l, ErrorMsg.ErrorMsg err) {
        this();
        errorMsg=err;
        lexer=l;
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Grm$actions {


    static Symbol.Symbol sym(String s) {
        return Symbol.Symbol.symbol(s);
    }


  /** Constructor */
  CUP$Grm$actions() { }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Grm$do_action(
    int                        CUP$Grm$act_num,
    java_cup.runtime.lr_parser CUP$Grm$parser,
    java.util.Stack            CUP$Grm$stack,
    int                        CUP$Grm$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Grm$result;

      /* select the action based on the action number */
      switch (CUP$Grm$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // function_call ::= ID LPAREN RPAREN 
            {
              Absyn.CallExp RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		 RESULT = new Absyn.CallExp(ileft, sym(i), null); 
              CUP$Grm$result = new java_cup.runtime.Symbol(52/*function_call*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // function_call ::= ID LPAREN expression_list RPAREN 
            {
              Absyn.CallExp RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-3)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Absyn.ExpList el = (Absyn.ExpList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		 RESULT = new Absyn.CallExp(ileft, sym(i), el); 
              CUP$Grm$result = new java_cup.runtime.Symbol(52/*function_call*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // nil_expression ::= VOID 
            {
              Absyn.NilExp RESULT = null;
		 RESULT = new Absyn.NilExp(0); 
              CUP$Grm$result = new java_cup.runtime.Symbol(20/*nil_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // integer_literal ::= DECIMAL_LITERAL 
            {
              Absyn.IntExp RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.IntExp(nleft, n); 
              CUP$Grm$result = new java_cup.runtime.Symbol(18/*integer_literal*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // simple_variable ::= ID 
            {
              Absyn.SimpleVar RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.SimpleVar(ileft, sym(i)); 
              CUP$Grm$result = new java_cup.runtime.Symbol(26/*simple_variable*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // variable ::= array_subscript 
            {
              Absyn.Var RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.SubscriptVar v = (Absyn.SubscriptVar)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = v; 
              CUP$Grm$result = new java_cup.runtime.Symbol(30/*variable*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // variable ::= field_var 
            {
              Absyn.Var RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.FieldVar v = (Absyn.FieldVar)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = v; 
              CUP$Grm$result = new java_cup.runtime.Symbol(30/*variable*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // variable ::= simple_variable 
            {
              Absyn.Var RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.SimpleVar v = (Absyn.SimpleVar)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = v; 
              CUP$Grm$result = new java_cup.runtime.Symbol(30/*variable*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // for_statement ::= FOR LPAREN expression SEMICOLON expression SEMICOLON expression RPAREN expression 
            {
              Absyn.ForExp RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-8)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-8)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-8)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-6)).right;
		Absyn.Exp i = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).right;
		Absyn.Exp c = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-4)).value;
		int uleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp u = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp b = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.ForExp(fleft, i, c, u, b); 
              CUP$Grm$result = new java_cup.runtime.Symbol(15/*for_statement*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-8)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // while_statement ::= WHILE LPAREN expression RPAREN expression 
            {
              Absyn.WhileExp RESULT = null;
		int wleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).right;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp e = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp b = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.WhileExp(wleft, e, b); 
              CUP$Grm$result = new java_cup.runtime.Symbol(33/*while_statement*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // if_statement ::= IF LPAREN expression RPAREN expression 
            {
              Absyn.IfExp RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp e = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp t = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.IfExp(ileft, e, t, null); 
              CUP$Grm$result = new java_cup.runtime.Symbol(17/*if_statement*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // if_statement ::= IF LPAREN expression RPAREN expression ELSE expression 
            {
              Absyn.IfExp RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-6)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).right;
		Absyn.Exp e = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp t = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp f = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.IfExp(ileft, e, t, f); 
              CUP$Grm$result = new java_cup.runtime.Symbol(17/*if_statement*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-6)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // operator_expression ::= expression OR expression 
            {
              Absyn.OpExp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp e1 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e2 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.OpExp(oleft, e1, Absyn.OpExp.OR, e2); 
              CUP$Grm$result = new java_cup.runtime.Symbol(21/*operator_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // operator_expression ::= expression AND expression 
            {
              Absyn.OpExp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp e1 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e2 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.OpExp(aleft, e1, Absyn.OpExp.AND, e2); 
              CUP$Grm$result = new java_cup.runtime.Symbol(21/*operator_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // operator_expression ::= expression GE expression 
            {
              Absyn.OpExp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp e1 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Object g = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e2 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.OpExp(gleft, e1, Absyn.OpExp.GE, e2); 
              CUP$Grm$result = new java_cup.runtime.Symbol(21/*operator_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // operator_expression ::= expression GT expression 
            {
              Absyn.OpExp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp e1 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Object g = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e2 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.OpExp(gleft, e1, Absyn.OpExp.GT, e2); 
              CUP$Grm$result = new java_cup.runtime.Symbol(21/*operator_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // operator_expression ::= expression LE expression 
            {
              Absyn.OpExp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp e1 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e2 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.OpExp(lleft, e1, Absyn.OpExp.LE, e2); 
              CUP$Grm$result = new java_cup.runtime.Symbol(21/*operator_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // operator_expression ::= expression LT expression 
            {
              Absyn.OpExp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp e1 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e2 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.OpExp(lleft, e1, Absyn.OpExp.LT, e2); 
              CUP$Grm$result = new java_cup.runtime.Symbol(21/*operator_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // operator_expression ::= expression NEQ expression 
            {
              Absyn.OpExp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp e1 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e2 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.OpExp(nleft, e1, Absyn.OpExp.NE, e2); 
              CUP$Grm$result = new java_cup.runtime.Symbol(21/*operator_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // operator_expression ::= expression EQ expression 
            {
              Absyn.OpExp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp e1 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e2 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.OpExp(eleft, e1, Absyn.OpExp.EQ, e2); 
              CUP$Grm$result = new java_cup.runtime.Symbol(21/*operator_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // operator_expression ::= expression MODULUS expression 
            {
              Absyn.OpExp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp e1 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e2 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.OpExp(mleft, e1, Absyn.OpExp.MOD, e2); 
              CUP$Grm$result = new java_cup.runtime.Symbol(21/*operator_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // operator_expression ::= expression DIVIDE expression 
            {
              Absyn.OpExp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp e1 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e2 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.OpExp(dleft, e1, Absyn.OpExp.DIVIDE, e2); 
              CUP$Grm$result = new java_cup.runtime.Symbol(21/*operator_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // operator_expression ::= expression TIMES expression 
            {
              Absyn.OpExp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp e1 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e2 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.OpExp(tleft, e1, Absyn.OpExp.TIMES, e2); 
              CUP$Grm$result = new java_cup.runtime.Symbol(21/*operator_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // operator_expression ::= expression MINUS expression 
            {
              Absyn.OpExp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp e1 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e2 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.OpExp(mleft, e1, Absyn.OpExp.MINUS, e2); 
              CUP$Grm$result = new java_cup.runtime.Symbol(21/*operator_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // operator_expression ::= expression PLUS expression 
            {
              Absyn.OpExp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp e1 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e2 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.OpExp(pleft, e1, Absyn.OpExp.PLUS, e2); 
              CUP$Grm$result = new java_cup.runtime.Symbol(21/*operator_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // expression ::= nil_expression 
            {
              Absyn.Exp RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.NilExp n = (Absyn.NilExp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = n; 
              CUP$Grm$result = new java_cup.runtime.Symbol(8/*expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // expression ::= for_statement 
            {
              Absyn.Exp RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.ForExp f = (Absyn.ForExp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = f; 
              CUP$Grm$result = new java_cup.runtime.Symbol(8/*expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // expression ::= while_statement 
            {
              Absyn.Exp RESULT = null;
		int wleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.WhileExp w = (Absyn.WhileExp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = w; 
              CUP$Grm$result = new java_cup.runtime.Symbol(8/*expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // expression ::= if_statement 
            {
              Absyn.Exp RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.IfExp i = (Absyn.IfExp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = i; 
              CUP$Grm$result = new java_cup.runtime.Symbol(8/*expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // expression ::= function_call 
            {
              Absyn.Exp RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.CallExp f = (Absyn.CallExp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = f; 
              CUP$Grm$result = new java_cup.runtime.Symbol(8/*expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // expression ::= operator_expression 
            {
              Absyn.Exp RESULT = null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.OpExp o = (Absyn.OpExp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = o; 
              CUP$Grm$result = new java_cup.runtime.Symbol(8/*expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // expression ::= variable 
            {
              Absyn.Exp RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Var v = (Absyn.Var)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.VarExp(vleft, v); 
              CUP$Grm$result = new java_cup.runtime.Symbol(8/*expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // expression ::= string_literal 
            {
              Absyn.Exp RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.StringExp s = (Absyn.StringExp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = s; 
              CUP$Grm$result = new java_cup.runtime.Symbol(8/*expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // expression ::= integer_literal 
            {
              Absyn.Exp RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.IntExp i = (Absyn.IntExp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = i; 
              CUP$Grm$result = new java_cup.runtime.Symbol(8/*expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // assignment_expression ::= expression 
            {
              Absyn.AssignExp RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = e; 
              CUP$Grm$result = new java_cup.runtime.Symbol(40/*assignment_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // assignment_expression ::= variable ASSIGN expression 
            {
              Absyn.AssignExp RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Var v = (Absyn.Var)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.AssignExp(vleft, v, e); 
              CUP$Grm$result = new java_cup.runtime.Symbol(40/*assignment_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // constant_expression ::= expression 
            {
              Absyn.Exp RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = e; 
              CUP$Grm$result = new java_cup.runtime.Symbol(39/*constant_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // enumerator ::= ID ASSIGN constant_expression 
            {
              String RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = i + "=" + e.toString(); 
              CUP$Grm$result = new java_cup.runtime.Symbol(38/*enumerator*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // enumerator ::= ID 
            {
              String RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = i; 
              CUP$Grm$result = new java_cup.runtime.Symbol(38/*enumerator*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // enumerator_list ::= enumerator_list COMMA enumerator 
            {
              ArrayList RESULT = null;
		int elleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		ArrayList el = (ArrayList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 el.add(e);
       RESULT = el; 
              CUP$Grm$result = new java_cup.runtime.Symbol(37/*enumerator_list*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // enumerator_list ::= enumerator 
            {
              ArrayList RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 ArrayList<String> list = new ArrayList<>();
       list.add(e);
       RESULT = list; 
              CUP$Grm$result = new java_cup.runtime.Symbol(37/*enumerator_list*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // struct_declaration_list ::= struct_declaration_list type name SEMICOLON 
            {
              ArrayList RESULT = null;
		int slleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).right;
		ArrayList sl = (ArrayList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Ty t = (Absyn.Ty)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Absyn.Name n = (Absyn.Name)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		 sl.add(new Absyn.Field(tleft, sym(n), t));
       RESULT = sl; 
              CUP$Grm$result = new java_cup.runtime.Symbol(43/*struct_declaration_list*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // struct_declaration_list ::= type name SEMICOLON 
            {
              ArrayList RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Ty t = (Absyn.Ty)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Absyn.Name n = (Absyn.Name)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		 ArrayList<Absyn.Field> list = new ArrayList<>();
       list.add(new Absyn.Field(tleft, sym(n), t));
       RESULT = list; 
              CUP$Grm$result = new java_cup.runtime.Symbol(43/*struct_declaration_list*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // struct_or_union_declarator ::= LBRACE struct_declaration_list RBRACE 
            {
              Absyn.FieldList RESULT = null;
		int slleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		ArrayList sl = (ArrayList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		 RESULT = sl; 
              CUP$Grm$result = new java_cup.runtime.Symbol(36/*struct_or_union_declarator*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // struct_or_union ::= UNION 
            {
              String RESULT = null;
		 RESULT = "union"; 
              CUP$Grm$result = new java_cup.runtime.Symbol(35/*struct_or_union*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // struct_or_union ::= STRUCT 
            {
              String RESULT = null;
		 RESULT = "struct"; 
              CUP$Grm$result = new java_cup.runtime.Symbol(35/*struct_or_union*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // initializer_list ::= initializer_list COMMA initializer 
            {
              ArrayList RESULT = null;
		int illeft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int ilright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		ArrayList il = (ArrayList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp i = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 il.add(i);
       RESULT = il; 
              CUP$Grm$result = new java_cup.runtime.Symbol(42/*initializer_list*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // initializer_list ::= initializer 
            {
              ArrayList RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp i = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 ArrayList<Absyn.Exp> list = new ArrayList<>();
       list.add(i);
       RESULT = list; 
              CUP$Grm$result = new java_cup.runtime.Symbol(42/*initializer_list*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // initializer ::= LBRACE initializer_list RBRACE 
            {
              Absyn.Exp RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int illeft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int ilright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		ArrayList il = (ArrayList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		 RESULT = new Absyn.ArrayExp(lleft, il); 
              CUP$Grm$result = new java_cup.runtime.Symbol(41/*initializer*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // initializer ::= assignment_expression 
            {
              Absyn.Exp RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.AssignExp e = (Absyn.AssignExp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = e; 
              CUP$Grm$result = new java_cup.runtime.Symbol(41/*initializer*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // parameter_type_list ::= parameter_type_list COMMA type 
            {
              ArrayList RESULT = null;
		int plleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		ArrayList pl = (ArrayList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Ty t = (Absyn.Ty)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 pl.add(t);
       RESULT = pl; 
              CUP$Grm$result = new java_cup.runtime.Symbol(51/*parameter_type_list*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // parameter_type_list ::= type 
            {
              ArrayList RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Ty t = (Absyn.Ty)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 ArrayList<Absyn.Ty> list = new ArrayList<>();
       list.add(t);
       RESULT = list; 
              CUP$Grm$result = new java_cup.runtime.Symbol(51/*parameter_type_list*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // type_parameters ::= LPAREN RPAREN 
            {
              Absyn.FieldList RESULT = null;
		 RESULT = new ArrayList<>(); 
              CUP$Grm$result = new java_cup.runtime.Symbol(13/*type_parameters*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // type_parameters ::= LPAREN parameter_type_list COMMA ELIPSES RPAREN 
            {
              Absyn.FieldList RESULT = null;
		int plleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).right;
		ArrayList pl = (ArrayList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-3)).value;
		 RESULT = pl; 
              CUP$Grm$result = new java_cup.runtime.Symbol(13/*type_parameters*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // type_parameters ::= LPAREN parameter_type_list RPAREN 
            {
              Absyn.FieldList RESULT = null;
		int plleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		ArrayList pl = (ArrayList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		 RESULT = pl; 
              CUP$Grm$result = new java_cup.runtime.Symbol(13/*type_parameters*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // parameter_list ::= parameter_list COMMA type name 
            {
              ArrayList RESULT = null;
		int plleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).right;
		ArrayList pl = (ArrayList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Absyn.Ty t = (Absyn.Ty)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Name n = (Absyn.Name)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 pl.add(new Absyn.Field(tleft, sym(n), t));
       RESULT = pl; 
              CUP$Grm$result = new java_cup.runtime.Symbol(4/*parameter_list*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // parameter_list ::= type name 
            {
              ArrayList RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Absyn.Ty t = (Absyn.Ty)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Name n = (Absyn.Name)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 ArrayList<Absyn.Field> list = new ArrayList<>();
       list.add(new Absyn.Field(tleft, sym(n), t));
       RESULT = list; 
              CUP$Grm$result = new java_cup.runtime.Symbol(4/*parameter_list*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // parameters ::= LPAREN RPAREN 
            {
              Absyn.FieldList RESULT = null;
		 RESULT = new ArrayList<>(); 
              CUP$Grm$result = new java_cup.runtime.Symbol(12/*parameters*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // parameters ::= LPAREN parameter_list COMMA ELIPSES RPAREN 
            {
              Absyn.FieldList RESULT = null;
		int plleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).right;
		ArrayList pl = (ArrayList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-3)).value;
		 RESULT = pl; 
              CUP$Grm$result = new java_cup.runtime.Symbol(12/*parameters*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // parameters ::= LPAREN parameter_list RPAREN 
            {
              Absyn.FieldList RESULT = null;
		int plleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		ArrayList pl = (ArrayList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		 RESULT = pl; 
              CUP$Grm$result = new java_cup.runtime.Symbol(12/*parameters*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expression_array_type ::= LBRACK constant_expression RBRACK 
            {
              Absyn.Exp RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Absyn.Exp e = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		 RESULT = e; 
              CUP$Grm$result = new java_cup.runtime.Symbol(47/*expression_array_type*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expression_array_type_list ::= expression_array_type_list expression_array_type 
            {
              ArrayList RESULT = null;
		int elleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		ArrayList el = (ArrayList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 el.add(e);
       RESULT = el; 
              CUP$Grm$result = new java_cup.runtime.Symbol(46/*expression_array_type_list*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expression_array_type_list ::= expression_array_type 
            {
              ArrayList RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 ArrayList<Absyn.Exp> list = new ArrayList<>();
       list.add(e);
       RESULT = list; 
              CUP$Grm$result = new java_cup.runtime.Symbol(46/*expression_array_type_list*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // expression_list ::= expression_list expression 
            {
              Absyn.ExpList RESULT = null;
		int elleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Absyn.ExpList el = (Absyn.ExpList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.ExpList(e, el); 
              CUP$Grm$result = new java_cup.runtime.Symbol(10/*expression_list*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expression_list ::= expression 
            {
              Absyn.ExpList RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.ExpList(e, null); 
              CUP$Grm$result = new java_cup.runtime.Symbol(10/*expression_list*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // compound_statement ::= LBRACE RBRACE 
            {
              Absyn.SeqExp RESULT = null;
		 RESULT = new Absyn.SeqExp(eleft, null); 
              CUP$Grm$result = new java_cup.runtime.Symbol(25/*compound_statement*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // compound_statement ::= LBRACE expression_list RBRACE 
            {
              Absyn.SeqExp RESULT = null;
		int elleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Absyn.ExpList el = (Absyn.ExpList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		 RESULT = new Absyn.SeqExp(elleft, el); 
              CUP$Grm$result = new java_cup.runtime.Symbol(25/*compound_statement*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // empty_array_type ::= LBRACK RBRACK 
            {
              String RESULT = null;
		 RESULT = "[]"; 
              CUP$Grm$result = new java_cup.runtime.Symbol(45/*empty_array_type*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // empty_array_type_list ::= empty_array_type_list empty_array_type 
            {
              ArrayList RESULT = null;
		int elleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		ArrayList el = (ArrayList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 el.add(e);
       RESULT = el; 
              CUP$Grm$result = new java_cup.runtime.Symbol(44/*empty_array_type_list*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // empty_array_type_list ::= empty_array_type 
            {
              ArrayList RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 ArrayList<String> list = new ArrayList<>();
       list.add(e);
       RESULT = list; 
              CUP$Grm$result = new java_cup.runtime.Symbol(44/*empty_array_type_list*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // brackets_list ::= expression_array_type_list 
            {
              ArrayList RESULT = null;
		int elleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		ArrayList el = (ArrayList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = el; 
              CUP$Grm$result = new java_cup.runtime.Symbol(49/*brackets_list*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // brackets_list ::= empty_array_type_list 
            {
              ArrayList RESULT = null;
		int elleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		ArrayList el = (ArrayList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = el; 
              CUP$Grm$result = new java_cup.runtime.Symbol(49/*brackets_list*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // pointer_list ::= pointer_list TIMES 
            {
              ArrayList RESULT = null;
		int plleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		ArrayList pl = (ArrayList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		 pl.add(1);
       RESULT = pl; 
              CUP$Grm$result = new java_cup.runtime.Symbol(48/*pointer_list*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // pointer_list ::= TIMES 
            {
              ArrayList RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 ArrayList<Integer> list = new ArrayList<>();
       list.add(1);
       RESULT = list; 
              CUP$Grm$result = new java_cup.runtime.Symbol(48/*pointer_list*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // type_augments ::= pointer_list brackets_list 
            {
              Absyn.Ty RESULT = null;
		int plleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		ArrayList pl = (ArrayList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int blleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int blright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		ArrayList bl = (ArrayList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.PointerArrayType(plleft, pl, bl); 
              CUP$Grm$result = new java_cup.runtime.Symbol(50/*type_augments*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // type_augments ::= brackets_list 
            {
              Absyn.Ty RESULT = null;
		int blleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int blright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		ArrayList bl = (ArrayList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.ArrayType(blleft, bl); 
              CUP$Grm$result = new java_cup.runtime.Symbol(50/*type_augments*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // type_augments ::= pointer_list 
            {
              Absyn.Ty RESULT = null;
		int plleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		ArrayList pl = (ArrayList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.PointerType(plleft, pl); 
              CUP$Grm$result = new java_cup.runtime.Symbol(50/*type_augments*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // initialization ::= ASSIGN initializer 
            {
              Absyn.Exp RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp i = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = i; 
              CUP$Grm$result = new java_cup.runtime.Symbol(9/*initialization*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // initialization ::= 
            {
              Absyn.Exp RESULT = null;
		 RESULT = null; 
              CUP$Grm$result = new java_cup.runtime.Symbol(9/*initialization*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // type_name ::= ID 
            {
              Absyn.NameTy RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = i; 
              CUP$Grm$result = new java_cup.runtime.Symbol(7/*type_name*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // type_name ::= ENUM ID 
            {
              Absyn.NameTy RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = "enum " + i; 
              CUP$Grm$result = new java_cup.runtime.Symbol(7/*type_name*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // type_name ::= DOUBLE 
            {
              Absyn.NameTy RESULT = null;
		 RESULT = "double"; 
              CUP$Grm$result = new java_cup.runtime.Symbol(7/*type_name*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // type_name ::= FLOAT 
            {
              Absyn.NameTy RESULT = null;
		 RESULT = "float"; 
              CUP$Grm$result = new java_cup.runtime.Symbol(7/*type_name*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // type_name ::= LONG 
            {
              Absyn.NameTy RESULT = null;
		 RESULT = "long"; 
              CUP$Grm$result = new java_cup.runtime.Symbol(7/*type_name*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // type_name ::= INT 
            {
              Absyn.NameTy RESULT = null;
		 RESULT = "int"; 
              CUP$Grm$result = new java_cup.runtime.Symbol(7/*type_name*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // type_name ::= SHORT 
            {
              Absyn.NameTy RESULT = null;
		 RESULT = "short"; 
              CUP$Grm$result = new java_cup.runtime.Symbol(7/*type_name*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // type_name ::= CHAR 
            {
              Absyn.NameTy RESULT = null;
		 RESULT = "char"; 
              CUP$Grm$result = new java_cup.runtime.Symbol(7/*type_name*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // type_name ::= VOID 
            {
              Absyn.NameTy RESULT = null;
		 RESULT = "void"; 
              CUP$Grm$result = new java_cup.runtime.Symbol(7/*type_name*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // type ::= type_name 
            {
              Absyn.Ty RESULT = null;
		int tnleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int tnright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.NameTy tn = (Absyn.NameTy)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.SimpleType(tnleft, tn); 
              CUP$Grm$result = new java_cup.runtime.Symbol(6/*type*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // type ::= type_name type_augments 
            {
              Absyn.Ty RESULT = null;
		int tnleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int tnright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Absyn.NameTy tn = (Absyn.NameTy)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int taleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int taright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Ty ta = (Absyn.Ty)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.AugmentedType(tnleft, tn, ta); 
              CUP$Grm$result = new java_cup.runtime.Symbol(6/*type*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // name ::= ID 
            {
              Absyn.Name RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = i; 
              CUP$Grm$result = new java_cup.runtime.Symbol(5/*name*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // bitfield_value ::= REGISTER 
            {
              Absyn.BitfieldValue RESULT = null;
		 RESULT = "register"; 
              CUP$Grm$result = new java_cup.runtime.Symbol(34/*bitfield_value*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // bitfield_value ::= AUTO 
            {
              Absyn.BitfieldValue RESULT = null;
		 RESULT = "auto"; 
              CUP$Grm$result = new java_cup.runtime.Symbol(34/*bitfield_value*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // bitfield_value ::= STATIC 
            {
              Absyn.BitfieldValue RESULT = null;
		 RESULT = "static"; 
              CUP$Grm$result = new java_cup.runtime.Symbol(34/*bitfield_value*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // bitfield_value ::= EXTERN 
            {
              Absyn.BitfieldValue RESULT = null;
		 RESULT = "extern"; 
              CUP$Grm$result = new java_cup.runtime.Symbol(34/*bitfield_value*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // bitfield_value ::= VOLATILE 
            {
              Absyn.BitfieldValue RESULT = null;
		 RESULT = "volatile"; 
              CUP$Grm$result = new java_cup.runtime.Symbol(34/*bitfield_value*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // bitfield_value ::= CONST 
            {
              Absyn.BitfieldValue RESULT = null;
		 RESULT = "const"; 
              CUP$Grm$result = new java_cup.runtime.Symbol(34/*bitfield_value*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // bitfield_list ::= bitfield_value bitfield_list 
            {
              ArrayList RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Absyn.BitfieldValue v = (Absyn.BitfieldValue)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		ArrayList l = (ArrayList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 l.add(0, v);
       RESULT = l; 
              CUP$Grm$result = new java_cup.runtime.Symbol(3/*bitfield_list*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // bitfield_list ::= 
            {
              ArrayList RESULT = null;
		 RESULT = new ArrayList<>(); 
              CUP$Grm$result = new java_cup.runtime.Symbol(3/*bitfield_list*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // declaration ::= ENUM ID LBRACE enumerator_list RBRACE 
            {
              Absyn.Dec RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-3)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		ArrayList el = (ArrayList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		 RESULT = new Absyn.EnumDec(eleft, sym(i), el); 
              CUP$Grm$result = new java_cup.runtime.Symbol(2/*declaration*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // declaration ::= struct_or_union name struct_or_union_declarator 
            {
              Absyn.Dec RESULT = null;
		int suleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int suright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		String su = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Absyn.Name n = (Absyn.Name)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.FieldList d = (Absyn.FieldList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.StructDec(suleft, su, sym(n), d); 
              CUP$Grm$result = new java_cup.runtime.Symbol(2/*declaration*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // declaration ::= TYPEDEF type name SEMICOLON 
            {
              Absyn.Dec RESULT = null;
		int tdleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).right;
		Object td = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Ty t = (Absyn.Ty)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Absyn.Name n = (Absyn.Name)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		 RESULT = new Absyn.TypeDef(tdleft, t, sym(n)); 
              CUP$Grm$result = new java_cup.runtime.Symbol(2/*declaration*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // declaration ::= FUN bitfield_list type name type_parameters SEMICOLON 
            {
              Absyn.Dec RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).right;
		ArrayList b = (ArrayList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).right;
		Absyn.Ty t = (Absyn.Ty)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Name n = (Absyn.Name)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Absyn.FieldList tp = (Absyn.FieldList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		 RESULT = new Absyn.FunctionPrototype(fleft, sym(n), tp, t); 
              CUP$Grm$result = new java_cup.runtime.Symbol(2/*declaration*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // declaration ::= FUN bitfield_list type name parameters compound_statement 
            {
              Absyn.Dec RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).right;
		ArrayList b = (ArrayList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).right;
		Absyn.Ty t = (Absyn.Ty)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Name n = (Absyn.Name)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Absyn.FieldList p = (Absyn.FieldList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.SeqExp c = (Absyn.SeqExp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.FunctionDec(fleft, sym(n), p, t, c); 
              CUP$Grm$result = new java_cup.runtime.Symbol(2/*declaration*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // declaration ::= VAR bitfield_list type name initialization SEMICOLON 
            {
              Absyn.Dec RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).right;
		ArrayList b = (ArrayList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).right;
		Absyn.Ty t = (Absyn.Ty)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Name n = (Absyn.Name)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Absyn.Exp i = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		 RESULT = new Absyn.VarDec(vleft, sym(n), t, i); 
              CUP$Grm$result = new java_cup.runtime.Symbol(2/*declaration*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // declaration_list ::= declaration_list declaration 
            {
              Absyn.DecList RESULT = null;
		int dlleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int dlright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Absyn.DecList dl = (Absyn.DecList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Dec d = (Absyn.Dec)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 dl.add(d); RESULT = dl; 
              CUP$Grm$result = new java_cup.runtime.Symbol(1/*declaration_list*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // declaration_list ::= declaration 
            {
              Absyn.DecList RESULT = null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Dec d = (Absyn.Dec)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new DeclarationList(d); 
              CUP$Grm$result = new java_cup.runtime.Symbol(1/*declaration_list*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= declaration_list EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Absyn.DecList start_val = (Absyn.DecList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		RESULT = start_val;
              CUP$Grm$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$Grm$parser.done_parsing();
          return CUP$Grm$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

