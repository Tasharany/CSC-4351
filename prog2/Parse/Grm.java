
//----------------------------------------------------
// The following code was generated by CUP v0.10g
// Thu Apr 03 23:21:01 CDT 2025
//----------------------------------------------------

package Parse;

import java.util.ArrayList;

public class Grm extends java_cup.runtime.lr_parser {

  /** constructor */
  public Grm() {super();}

  /** production table */
  protected static final short _production_table[][] = {
        {0, 2},     {1, 1},     {1, 2},     {2, 6},     {2, 6}, 
        {2, 4},     {2, 5},     {2, 5},     {2, 5},     {3, 2}, 
        {3, 4},     {3, 3},     {5, 0},     {5, 2},     {15, 2}, 
        {15, 0},     {39, 1},     {39, 1},     {39, 1},     {39, 1}, 
        {39, 1},     {39, 1},     {39, 1},     {39, 1},     {41, 1}, 
        {41, 1},     {41, 1},     {41, 1},     {41, 1},     {41, 1}, 
        {14, 1},     {14, 1},     {14, 1},     {14, 1},     {14, 1}, 
        {14, 1},     {14, 5},     {14, 7},     {14, 10},     {14, 2}, 
        {14, 2},     {14, 3},     {14, 2},     {14, 1},     {14, 1}, 
        {34, 7},     {36, 2},     {37, 2},     {38, 3},     {38, 2}, 
        {25, 3},     {25, 3},     {25, 3},     {25, 3},     {25, 3}, 
        {25, 3},     {25, 3},     {25, 3},     {25, 3},     {25, 3}, 
        {25, 3},     {25, 3},     {29, 1},     {27, 3},     {16, 1}, 
        {16, 2},     {31, 1},     {31, 1},     {31, 1},     {28, 1}, 
        {32, 1},     {22, 1},     {17, 3},     {17, 2},     {24, 1}, 
        {35, 4},     {35, 3},     {21, 7},     {21, 5},     {33, 5}, 
        {20, 10},     {19, 3},     {30, 4},     {7, 3},     {7, 4}, 
        {13, 1},     {13, 3},     {13, 3},     {13, 5}  };

  /** access to production table */
  public short[][] production_table() {return _production_table;}

  /** parse action table */
  protected static final short[][] _action_table = {
    /*0*/{39,2,40,8,41,7,42,5,43,6,44,3,-1,0},
    /*1*/{2,-13,45,12,46,13,47,18,48,16,49,17,50,15,51,-13,52,-13,53,-13,54,-13,55,-13,56,-13,57,-13,-1,0},
    /*2*/{2,151,-1,0},
    /*3*/{0,-2,39,-2,40,-2,41,-2,42,-2,43,-2,44,-2,-1,0},
    /*4*/{2,147,-1,0},
    /*5*/{2,137,-1,0},
    /*6*/{2,25,51,23,52,26,53,28,54,21,55,22,56,27,57,24,-1,0},
    /*7*/{2,-13,45,12,46,13,47,18,48,16,49,17,50,15,51,-13,52,-13,53,-13,54,-13,55,-13,56,-13,57,-13,-1,0},
    /*8*/{0,11,39,2,40,8,41,7,42,5,43,6,44,3,-1,0},
    /*9*/{0,-3,39,-3,40,-3,41,-3,42,-3,43,-3,44,-3,-1,0},
    /*10*/{0,-1,-1,0},
    /*11*/{2,-25,45,-25,46,-25,47,-25,48,-25,49,-25,50,-25,51,-25,52,-25,53,-25,54,-25,55,-25,56,-25,57,-25,-1,0},
    /*12*/{2,-26,45,-26,46,-26,47,-26,48,-26,49,-26,50,-26,51,-26,52,-26,53,-26,54,-26,55,-26,56,-26,57,-26,-1,0},
    /*13*/{2,-13,45,12,46,13,47,18,48,16,49,17,50,15,51,-13,52,-13,53,-13,54,-13,55,-13,56,-13,57,-13,-1,0},
    /*14*/{2,-30,45,-30,46,-30,47,-30,48,-30,49,-30,50,-30,51,-30,52,-30,53,-30,54,-30,55,-30,56,-30,57,-30,-1,0},
    /*15*/{2,-28,45,-28,46,-28,47,-28,48,-28,49,-28,50,-28,51,-28,52,-28,53,-28,54,-28,55,-28,56,-28,57,-28,-1,0},
    /*16*/{2,-29,45,-29,46,-29,47,-29,48,-29,49,-29,50,-29,51,-29,52,-29,53,-29,54,-29,55,-29,56,-29,57,-29,-1,0},
    /*17*/{2,-27,45,-27,46,-27,47,-27,48,-27,49,-27,50,-27,51,-27,52,-27,53,-27,54,-27,55,-27,56,-27,57,-27,-1,0},
    /*18*/{2,25,51,23,52,26,53,28,54,21,55,22,56,27,57,24,-1,0},
    /*19*/{2,29,-1,0},
    /*20*/{2,-20,-1,0},
    /*21*/{2,-21,-1,0},
    /*22*/{2,-17,-1,0},
    /*23*/{2,-23,-1,0},
    /*24*/{2,-24,-1,0},
    /*25*/{2,-18,-1,0},
    /*26*/{2,-22,-1,0},
    /*27*/{2,-19,-1,0},
    /*28*/{8,30,-1,0},
    /*29*/{2,25,9,126,51,23,52,26,53,28,54,21,55,22,56,27,57,24,-1,0},
    /*30*/{10,32,-1,0},
    /*31*/{2,45,3,46,4,42,10,32,31,44,33,39,34,47,35,53,36,50,37,35,38,43,51,56,-1,0},
    /*32*/{0,-5,39,-5,40,-5,41,-5,42,-5,43,-5,44,-5,-1,0},
    /*33*/{2,-34,3,-34,4,-34,6,-34,7,-34,9,-34,10,-34,11,-34,13,-34,15,-34,16,-34,17,-34,18,-34,20,-34,21,-34,22,-34,23,-34,24,-34,25,-34,26,-34,27,-34,30,-34,31,-34,32,-34,33,-34,34,-34,35,-34,36,-34,37,-34,38,-34,51,-34,-1,0},
    /*34*/{6,123,-1,0},
    /*35*/{2,-35,3,-35,4,-35,6,-35,7,-35,9,-35,10,-35,11,-35,13,-35,15,-35,16,-35,17,-35,18,-35,20,-35,21,-35,22,-35,23,-35,24,-35,25,-35,26,-35,27,-35,30,-35,31,-35,32,-35,33,-35,34,-35,35,-35,36,-35,37,-35,38,-35,51,-35,-1,0},
    /*36*/{2,-69,3,-69,4,-69,6,-69,7,-69,9,-69,10,-69,11,-69,12,-69,13,-69,14,-69,15,-69,16,-69,17,-69,18,-69,20,-69,21,-69,22,-69,23,-69,24,-69,25,-69,26,-69,27,-69,30,-69,31,-69,32,-69,33,-69,34,-69,35,-69,36,-69,37,-69,38,-69,51,-69,-1,0},
    /*37*/{2,-71,3,-71,4,-71,6,-71,7,-71,9,-71,10,-71,11,-71,12,118,13,-71,14,119,15,-71,16,-71,17,-71,18,-71,20,-71,21,-71,22,-71,23,-71,24,-71,25,-71,26,-71,27,-71,30,-71,31,-71,32,-71,33,-71,34,-71,35,-71,36,-71,37,-71,38,-71,51,-71,-1,0},
    /*38*/{8,114,-1,0},
    /*39*/{2,-32,3,-32,4,-32,6,-32,7,-32,9,-32,10,-32,11,-32,13,-32,15,-32,16,-32,17,-32,18,-32,20,-32,21,-32,22,-32,23,-32,24,-32,25,-32,26,-32,27,-32,30,-32,31,-32,32,-32,33,-32,34,-32,35,-32,36,-32,37,-32,38,-32,51,-32,-1,0},
    /*40*/{2,-68,3,-68,4,-68,6,-68,7,-68,9,-68,10,-68,11,-68,12,-68,13,-68,14,-68,15,-68,16,-68,17,-68,18,-68,20,-68,21,-68,22,-68,23,-68,24,-68,25,-68,26,-68,27,-68,30,-68,31,-68,32,-68,33,-68,34,-68,35,-68,36,-68,37,-68,38,-68,51,-68,-1,0},
    /*41*/{2,-72,3,-72,4,-72,6,-72,7,-72,9,-72,10,-72,11,-72,13,-72,15,-72,16,-72,17,-72,18,-72,20,-72,21,-72,22,-72,23,-72,24,-72,25,-72,26,-72,27,-72,30,-72,31,-72,32,-72,33,-72,34,-72,35,-72,36,-72,37,-72,38,-72,51,-72,-1,0},
    /*42*/{2,45,3,46,4,42,6,111,10,32,31,44,33,39,34,47,35,53,36,50,37,35,38,43,51,56,-1,0},
    /*43*/{8,105,-1,0},
    /*44*/{2,-70,3,-70,4,-70,6,-70,7,-70,8,101,9,-70,10,-70,11,-70,12,-70,13,-70,14,-70,15,-70,16,-70,17,-70,18,-70,20,-70,21,-70,22,-70,23,-70,24,-70,25,-70,26,-70,27,-70,30,-70,31,-70,32,-70,33,-70,34,-70,35,-70,36,-70,37,-70,38,-70,51,-70,-1,0},
    /*45*/{2,-63,3,-63,4,-63,6,-63,7,-63,9,-63,10,-63,11,-63,13,-63,15,-63,16,-63,17,-63,18,-63,20,-63,21,-63,22,-63,23,-63,24,-63,25,-63,26,-63,27,-63,30,-63,31,-63,32,-63,33,-63,34,-63,35,-63,36,-63,37,-63,38,-63,51,-63,-1,0},
    /*46*/{2,45,3,46,4,42,10,32,31,44,33,39,34,47,35,53,36,50,37,35,38,43,51,56,-1,0},
    /*47*/{2,-31,3,-31,4,-31,6,-31,7,-31,9,-31,10,-31,11,-31,13,-31,15,-31,16,-31,17,-31,18,-31,20,-31,21,-31,22,-31,23,-31,24,-31,25,-31,26,-31,27,-31,30,-31,31,-31,32,-31,33,-31,34,-31,35,-31,36,-31,37,-31,38,-31,51,-31,-1,0},
    /*48*/{2,-45,3,-45,4,-45,6,-45,7,-45,9,-45,10,-45,11,-45,13,-45,15,-45,16,-45,17,-45,18,-45,20,-45,21,-45,22,-45,23,-45,24,-45,25,-45,26,-45,27,-45,30,-45,31,-45,32,-45,33,-45,34,-45,35,-45,36,-45,37,-45,38,-45,51,-45,-1,0},
    /*49*/{6,94,-1,0},
    /*50*/{2,-65,3,-65,4,-65,9,-65,10,-65,11,-65,15,66,16,61,17,70,18,63,20,67,21,65,22,71,23,68,24,69,25,64,26,62,27,72,31,-65,33,-65,34,-65,35,-65,36,-65,37,-65,38,-65,51,-65,-1,0},
    /*51*/{2,-36,3,-36,4,-36,6,-36,7,-36,9,-36,10,-36,11,-36,13,-36,15,-36,16,-36,17,-36,18,-36,20,-36,21,-36,22,-36,23,-36,24,-36,25,-36,26,-36,27,-36,30,-36,31,-36,32,-36,33,-36,34,-36,35,-36,36,-36,37,-36,38,-36,51,-36,-1,0},
    /*52*/{8,85,-1,0},
    /*53*/{2,-44,3,-44,4,-44,6,-44,7,-44,9,-44,10,-44,11,-44,13,-44,15,-44,16,-44,17,-44,18,-44,20,-44,21,-44,22,-44,23,-44,24,-44,25,-44,26,-44,27,-44,30,-44,31,-44,32,-44,33,-44,34,-44,35,-44,36,-44,37,-44,38,-44,51,-44,-1,0},
    /*54*/{2,-33,3,-33,4,-33,6,-33,7,-33,9,-33,10,-33,11,-33,13,-33,15,-33,16,-33,17,-33,18,-33,20,-33,21,-33,22,-33,23,-33,24,-33,25,-33,26,-33,27,-33,30,-33,31,-33,32,-33,33,-33,34,-33,35,-33,36,-33,37,-33,38,-33,51,-33,-1,0},
    /*55*/{2,-75,3,-75,4,-75,6,-75,7,-75,9,-75,10,-75,11,-75,13,-75,15,-75,16,-75,17,-75,18,-75,20,-75,21,-75,22,-75,23,-75,24,-75,25,-75,26,-75,27,-75,30,-75,31,-75,32,-75,33,-75,34,-75,35,-75,36,-75,37,-75,38,-75,51,-75,-1,0},
    /*56*/{2,-67,3,-67,4,-67,6,-67,7,-67,9,-67,10,-67,11,-67,12,-67,13,-67,14,-67,15,-67,16,-67,17,-67,18,-67,20,-67,21,-67,22,-67,23,-67,24,-67,25,-67,26,-67,27,-67,30,-67,31,-67,32,-67,33,-67,34,-67,35,-67,36,-67,37,-67,38,-67,51,-67,-1,0},
    /*57*/{2,45,3,46,4,42,10,32,11,59,31,44,33,39,34,47,35,53,36,50,37,35,38,43,51,56,-1,0},
    /*58*/{0,-64,2,-64,3,-64,4,-64,6,-64,7,-64,9,-64,10,-64,11,-64,13,-64,15,-64,16,-64,17,-64,18,-64,20,-64,21,-64,22,-64,23,-64,24,-64,25,-64,26,-64,27,-64,30,-64,31,-64,32,-64,33,-64,34,-64,35,-64,36,-64,37,-64,38,-64,39,-64,40,-64,41,-64,42,-64,43,-64,44,-64,51,-64,-1,0},
    /*59*/{2,-66,3,-66,4,-66,9,-66,10,-66,11,-66,15,66,16,61,17,70,18,63,20,67,21,65,22,71,23,68,24,69,25,64,26,62,27,72,31,-66,33,-66,34,-66,35,-66,36,-66,37,-66,38,-66,51,-66,-1,0},
    /*60*/{2,45,3,46,4,42,10,32,31,44,33,39,34,47,35,53,36,50,37,35,38,43,51,56,-1,0},
    /*61*/{2,45,3,46,4,42,10,32,31,44,33,39,34,47,35,53,36,50,37,35,38,43,51,56,-1,0},
    /*62*/{2,45,3,46,4,42,10,32,31,44,33,39,34,47,35,53,36,50,37,35,38,43,51,56,-1,0},
    /*63*/{2,45,3,46,4,42,10,32,31,44,33,39,34,47,35,53,36,50,37,35,38,43,51,56,-1,0},
    /*64*/{2,45,3,46,4,42,10,32,31,44,33,39,34,47,35,53,36,50,37,35,38,43,51,56,-1,0},
    /*65*/{2,45,3,46,4,42,10,32,31,44,33,39,34,47,35,53,36,50,37,35,38,43,51,56,-1,0},
    /*66*/{2,45,3,46,4,42,10,32,31,44,33,39,34,47,35,53,36,50,37,35,38,43,51,56,-1,0},
    /*67*/{2,45,3,46,4,42,10,32,31,44,33,39,34,47,35,53,36,50,37,35,38,43,51,56,-1,0},
    /*68*/{2,45,3,46,4,42,10,32,31,44,33,39,34,47,35,53,36,50,37,35,38,43,51,56,-1,0},
    /*69*/{2,45,3,46,4,42,10,32,31,44,33,39,34,47,35,53,36,50,37,35,38,43,51,56,-1,0},
    /*70*/{2,45,3,46,4,42,10,32,31,44,33,39,34,47,35,53,36,50,37,35,38,43,51,56,-1,0},
    /*71*/{2,45,3,46,4,42,10,32,31,44,33,39,34,47,35,53,36,50,37,35,38,43,51,56,-1,0},
    /*72*/{2,-62,3,-62,4,-62,6,-62,7,-62,9,-62,10,-62,11,-62,13,-62,15,66,16,61,17,70,18,63,20,67,21,65,22,71,23,68,24,69,25,64,26,62,27,-62,30,-62,31,-62,32,-62,33,-62,34,-62,35,-62,36,-62,37,-62,38,-62,51,-62,-1,0},
    /*73*/{2,-57,3,-57,4,-57,6,-57,7,-57,9,-57,10,-57,11,-57,13,-57,15,66,16,61,17,70,18,63,20,-57,21,-57,22,-57,23,-57,24,-57,25,-57,26,-57,27,-57,30,-57,31,-57,32,-57,33,-57,34,-57,35,-57,36,-57,37,-57,38,-57,51,-57,-1,0},
    /*74*/{2,-53,3,-53,4,-53,6,-53,7,-53,9,-53,10,-53,11,-53,13,-53,15,-53,16,-53,17,-53,18,-53,20,-53,21,-53,22,-53,23,-53,24,-53,25,-53,26,-53,27,-53,30,-53,31,-53,32,-53,33,-53,34,-53,35,-53,36,-53,37,-53,38,-53,51,-53,-1,0},
    /*75*/{2,-59,3,-59,4,-59,6,-59,7,-59,9,-59,10,-59,11,-59,13,-59,15,66,16,61,17,70,18,63,20,-59,21,-59,22,-59,23,-59,24,-59,25,-59,26,-59,27,-59,30,-59,31,-59,32,-59,33,-59,34,-59,35,-59,36,-59,37,-59,38,-59,51,-59,-1,0},
    /*76*/{2,-58,3,-58,4,-58,6,-58,7,-58,9,-58,10,-58,11,-58,13,-58,15,66,16,61,17,70,18,63,20,-58,21,-58,22,-58,23,-58,24,-58,25,-58,26,-58,27,-58,30,-58,31,-58,32,-58,33,-58,34,-58,35,-58,36,-58,37,-58,38,-58,51,-58,-1,0},
    /*77*/{2,-55,3,-55,4,-55,6,-55,7,-55,9,-55,10,-55,11,-55,13,-55,15,66,16,61,17,70,18,63,20,-55,21,-55,22,71,23,68,24,69,25,64,26,-55,27,-55,30,-55,31,-55,32,-55,33,-55,34,-55,35,-55,36,-55,37,-55,38,-55,51,-55,-1,0},
    /*78*/{2,-51,3,-51,4,-51,6,-51,7,-51,9,-51,10,-51,11,-51,13,-51,15,-51,16,-51,17,70,18,63,20,-51,21,-51,22,-51,23,-51,24,-51,25,-51,26,-51,27,-51,30,-51,31,-51,32,-51,33,-51,34,-51,35,-51,36,-51,37,-51,38,-51,51,-51,-1,0},
    /*79*/{2,-56,3,-56,4,-56,6,-56,7,-56,9,-56,10,-56,11,-56,13,-56,15,66,16,61,17,70,18,63,20,-56,21,-56,22,71,23,68,24,69,25,64,26,-56,27,-56,30,-56,31,-56,32,-56,33,-56,34,-56,35,-56,36,-56,37,-56,38,-56,51,-56,-1,0},
    /*80*/{2,-60,3,-60,4,-60,6,-60,7,-60,9,-60,10,-60,11,-60,13,-60,15,66,16,61,17,70,18,63,20,-60,21,-60,22,-60,23,-60,24,-60,25,-60,26,-60,27,-60,30,-60,31,-60,32,-60,33,-60,34,-60,35,-60,36,-60,37,-60,38,-60,51,-60,-1,0},
    /*81*/{2,-54,3,-54,4,-54,6,-54,7,-54,9,-54,10,-54,11,-54,13,-54,15,-54,16,-54,17,-54,18,-54,20,-54,21,-54,22,-54,23,-54,24,-54,25,-54,26,-54,27,-54,30,-54,31,-54,32,-54,33,-54,34,-54,35,-54,36,-54,37,-54,38,-54,51,-54,-1,0},
    /*82*/{2,-61,3,-61,4,-61,6,-61,7,-61,9,-61,10,-61,11,-61,13,-61,15,66,16,61,17,70,18,63,20,67,21,65,22,71,23,68,24,69,25,64,26,-61,27,-61,30,-61,31,-61,32,-61,33,-61,34,-61,35,-61,36,-61,37,-61,38,-61,51,-61,-1,0},
    /*83*/{2,-52,3,-52,4,-52,6,-52,7,-52,9,-52,10,-52,11,-52,13,-52,15,-52,16,-52,17,70,18,63,20,-52,21,-52,22,-52,23,-52,24,-52,25,-52,26,-52,27,-52,30,-52,31,-52,32,-52,33,-52,34,-52,35,-52,36,-52,37,-52,38,-52,51,-52,-1,0},
    /*84*/{39,86,-1,0},
    /*85*/{2,87,-1,0},
    /*86*/{28,88,-1,0},
    /*87*/{2,45,3,46,4,42,10,32,31,44,33,39,34,47,35,53,36,50,37,35,38,43,51,56,-1,0},
    /*88*/{15,66,16,61,17,70,18,63,20,67,21,65,22,71,23,68,24,69,25,64,26,62,27,72,30,90,-1,0},
    /*89*/{2,45,3,46,4,42,10,32,31,44,33,39,34,47,35,53,36,50,37,35,38,43,51,56,-1,0},
    /*90*/{9,92,15,66,16,61,17,70,18,63,20,67,21,65,22,71,23,68,24,69,25,64,26,62,27,72,-1,0},
    /*91*/{2,45,3,46,4,42,10,32,31,44,33,39,34,47,35,53,36,50,37,35,38,43,51,56,-1,0},
    /*92*/{2,-39,3,-39,4,-39,6,-39,7,-39,9,-39,10,-39,11,-39,13,-39,15,-39,16,-39,17,-39,18,-39,20,-39,21,-39,22,-39,23,-39,24,-39,25,-39,26,-39,27,-39,30,-39,31,-39,32,-39,33,-39,34,-39,35,-39,36,-39,37,-39,38,-39,51,-39,-1,0},
    /*93*/{2,-40,3,-40,4,-40,6,-40,7,-40,9,-40,10,-40,11,-40,13,-40,15,-40,16,-40,17,-40,18,-40,20,-40,21,-40,22,-40,23,-40,24,-40,25,-40,26,-40,27,-40,30,-40,31,-40,32,-40,33,-40,34,-40,35,-40,36,-40,37,-40,38,-40,51,-40,-1,0},
    /*94*/{15,66,16,61,17,70,18,63,20,67,21,65,22,71,23,68,24,69,25,64,26,62,27,72,33,96,-1,0},
    /*95*/{8,97,-1,0},
    /*96*/{2,45,3,46,4,42,10,32,31,44,33,39,34,47,35,53,36,50,37,35,38,43,51,56,-1,0},
    /*97*/{9,99,15,66,16,61,17,70,18,63,20,67,21,65,22,71,23,68,24,69,25,64,26,62,27,72,-1,0},
    /*98*/{6,100,-1,0},
    /*99*/{2,-38,3,-38,4,-38,6,-38,7,-38,9,-38,10,-38,11,-38,13,-38,15,-38,16,-38,17,-38,18,-38,20,-38,21,-38,22,-38,23,-38,24,-38,25,-38,26,-38,27,-38,30,-38,31,-38,32,-38,33,-38,34,-38,35,-38,36,-38,37,-38,38,-38,51,-38,-1,0},
    /*100*/{2,45,3,46,4,42,9,102,10,32,31,44,33,39,34,47,35,53,36,50,37,35,38,43,51,56,-1,0},
    /*101*/{2,-77,3,-77,4,-77,6,-77,7,-77,9,-77,10,-77,11,-77,13,-77,15,-77,16,-77,17,-77,18,-77,20,-77,21,-77,22,-77,23,-77,24,-77,25,-77,26,-77,27,-77,30,-77,31,-77,32,-77,33,-77,34,-77,35,-77,36,-77,37,-77,38,-77,51,-77,-1,0},
    /*102*/{2,45,3,46,4,42,9,104,10,32,31,44,33,39,34,47,35,53,36,50,37,35,38,43,51,56,-1,0},
    /*103*/{2,-76,3,-76,4,-76,6,-76,7,-76,9,-76,10,-76,11,-76,13,-76,15,-76,16,-76,17,-76,18,-76,20,-76,21,-76,22,-76,23,-76,24,-76,25,-76,26,-76,27,-76,30,-76,31,-76,32,-76,33,-76,34,-76,35,-76,36,-76,37,-76,38,-76,51,-76,-1,0},
    /*104*/{2,45,3,46,4,42,10,32,31,44,33,39,34,47,35,53,36,50,37,35,38,43,51,56,-1,0},
    /*105*/{9,107,15,66,16,61,17,70,18,63,20,67,21,65,22,71,23,68,24,69,25,64,26,62,27,72,-1,0},
    /*106*/{2,45,3,46,4,42,10,32,31,44,33,39,34,47,35,53,36,50,37,35,38,43,51,56,-1,0},
    /*107*/{2,-79,3,-79,4,-79,6,-79,7,-79,9,-79,10,-79,11,-79,13,-79,15,-79,16,-79,17,-79,18,-79,20,-79,21,-79,22,-79,23,-79,24,-79,25,-79,26,-79,27,-79,30,-79,31,-79,32,-79,33,-79,34,-79,35,-79,36,-79,37,-79,38,-79,51,-79,-1,0},
    /*108*/{2,45,3,46,4,42,10,32,31,44,33,39,34,47,35,53,36,50,37,35,38,43,51,56,-1,0},
    /*109*/{2,-78,3,-78,4,-78,6,-78,7,-78,9,-78,10,-78,11,-78,13,-78,15,66,16,61,17,70,18,63,20,67,21,65,22,71,23,68,24,69,25,64,26,62,27,72,30,-78,31,-78,32,-78,33,-78,34,-78,35,-78,36,-78,37,-78,38,-78,51,-78,-1,0},
    /*110*/{2,-43,3,-43,4,-43,6,-43,7,-43,9,-43,10,-43,11,-43,13,-43,15,-43,16,-43,17,-43,18,-43,20,-43,21,-43,22,-43,23,-43,24,-43,25,-43,26,-43,27,-43,30,-43,31,-43,32,-43,33,-43,34,-43,35,-43,36,-43,37,-43,38,-43,51,-43,-1,0},
    /*111*/{6,113,15,66,16,61,17,70,18,63,20,67,21,65,22,71,23,68,24,69,25,64,26,62,27,72,-1,0},
    /*112*/{2,-42,3,-42,4,-42,6,-42,7,-42,9,-42,10,-42,11,-42,13,-42,15,-42,16,-42,17,-42,18,-42,20,-42,21,-42,22,-42,23,-42,24,-42,25,-42,26,-42,27,-42,30,-42,31,-42,32,-42,33,-42,34,-42,35,-42,36,-42,37,-42,38,-42,51,-42,-1,0},
    /*113*/{2,45,3,46,4,42,10,32,31,44,33,39,34,47,35,53,36,50,37,35,38,43,51,56,-1,0},
    /*114*/{9,116,15,66,16,61,17,70,18,63,20,67,21,65,22,71,23,68,24,69,25,64,26,62,27,72,-1,0},
    /*115*/{2,45,3,46,4,42,10,32,31,44,33,39,34,47,35,53,36,50,37,35,38,43,51,56,-1,0},
    /*116*/{2,-37,3,-37,4,-37,6,-37,7,-37,9,-37,10,-37,11,-37,13,-37,15,-37,16,-37,17,-37,18,-37,20,-37,21,-37,22,-37,23,-37,24,-37,25,-37,26,-37,27,-37,30,-37,31,-37,32,-37,33,-37,34,-37,35,-37,36,-37,37,-37,38,-37,51,-37,-1,0},
    /*117*/{2,45,3,46,4,42,10,32,31,44,33,39,34,47,35,53,36,50,37,35,38,43,51,56,-1,0},
    /*118*/{2,120,-1,0},
    /*119*/{2,-82,3,-82,4,-82,6,-82,7,-82,9,-82,10,-82,11,-82,12,-82,13,-82,14,-82,15,-82,16,-82,17,-82,18,-82,20,-82,21,-82,22,-82,23,-82,24,-82,25,-82,26,-82,27,-82,30,-82,31,-82,32,-82,33,-82,34,-82,35,-82,36,-82,37,-82,38,-82,51,-82,-1,0},
    /*120*/{13,122,15,66,16,61,17,70,18,63,20,67,21,65,22,71,23,68,24,69,25,64,26,62,27,72,-1,0},
    /*121*/{2,-83,3,-83,4,-83,6,-83,7,-83,9,-83,10,-83,11,-83,12,-83,13,-83,14,-83,15,-83,16,-83,17,-83,18,-83,20,-83,21,-83,22,-83,23,-83,24,-83,25,-83,26,-83,27,-83,30,-83,31,-83,32,-83,33,-83,34,-83,35,-83,36,-83,37,-83,38,-83,51,-83,-1,0},
    /*122*/{2,-41,3,-41,4,-41,6,-41,7,-41,9,-41,10,-41,11,-41,13,-41,15,-41,16,-41,17,-41,18,-41,20,-41,21,-41,22,-41,23,-41,24,-41,25,-41,26,-41,27,-41,30,-41,31,-41,32,-41,33,-41,34,-41,35,-41,36,-41,37,-41,38,-41,51,-41,-1,0},
    /*123*/{2,132,-1,0},
    /*124*/{7,127,9,128,-1,0},
    /*125*/{10,-74,-1,0},
    /*126*/{2,25,29,130,51,23,52,26,53,28,54,21,55,22,56,27,57,24,-1,0},
    /*127*/{10,-73,-1,0},
    /*128*/{2,131,-1,0},
    /*129*/{7,-12,9,-12,-1,0},
    /*130*/{7,-11,9,-11,-1,0},
    /*131*/{7,-10,9,-10,-1,0},
    /*132*/{2,-14,51,-14,52,-14,53,-14,54,-14,55,-14,56,-14,57,-14,-1,0},
    /*133*/{2,135,-1,0},
    /*134*/{6,136,-1,0},
    /*135*/{0,-6,39,-6,40,-6,41,-6,42,-6,43,-6,44,-6,-1,0},
    /*136*/{10,138,-1,0},
    /*137*/{2,25,51,23,52,26,53,28,54,21,55,22,56,27,57,24,-1,0},
    /*138*/{2,145,-1,0},
    /*139*/{2,25,11,142,51,23,52,26,53,28,54,21,55,22,56,27,57,24,-1,0},
    /*140*/{2,143,-1,0},
    /*141*/{0,-8,39,-8,40,-8,41,-8,42,-8,43,-8,44,-8,-1,0},
    /*142*/{6,144,-1,0},
    /*143*/{2,-85,11,-85,51,-85,52,-85,53,-85,54,-85,55,-85,56,-85,57,-85,-1,0},
    /*144*/{6,146,-1,0},
    /*145*/{2,-84,11,-84,51,-84,52,-84,53,-84,54,-84,55,-84,56,-84,57,-84,-1,0},
    /*146*/{10,148,-1,0},
    /*147*/{2,25,51,23,52,26,53,28,54,21,55,22,56,27,57,24,-1,0},
    /*148*/{2,25,11,150,51,23,52,26,53,28,54,21,55,22,56,27,57,24,-1,0},
    /*149*/{0,-7,39,-7,40,-7,41,-7,42,-7,43,-7,44,-7,-1,0},
    /*150*/{10,152,-1,0},
    /*151*/{2,153,-1,0},
    /*152*/{7,-86,11,-86,28,160,-1,0},
    /*153*/{7,155,11,156,-1,0},
    /*154*/{2,157,-1,0},
    /*155*/{0,-9,39,-9,40,-9,41,-9,42,-9,43,-9,44,-9,-1,0},
    /*156*/{7,-87,11,-87,28,158,-1,0},
    /*157*/{2,45,3,46,4,42,10,32,31,44,33,39,34,47,35,53,36,50,37,35,38,43,51,56,-1,0},
    /*158*/{7,-89,11,-89,15,66,16,61,17,70,18,63,20,67,21,65,22,71,23,68,24,69,25,64,26,62,27,72,-1,0},
    /*159*/{2,45,3,46,4,42,10,32,31,44,33,39,34,47,35,53,36,50,37,35,38,43,51,56,-1,0},
    /*160*/{7,-88,11,-88,15,66,16,61,17,70,18,63,20,67,21,65,22,71,23,68,24,69,25,64,26,62,27,72,-1,0},
    /*161*/{2,25,51,23,52,26,53,28,54,21,55,22,56,27,57,24,-1,0},
    /*162*/{2,164,-1,0},
    /*163*/{6,-16,28,166,-1,0},
    /*164*/{6,168,-1,0},
    /*165*/{2,45,3,46,4,42,10,32,31,44,33,39,34,47,35,53,36,50,37,35,38,43,51,56,-1,0},
    /*166*/{6,-15,15,66,16,61,17,70,18,63,20,67,21,65,22,71,23,68,24,69,25,64,26,62,27,72,-1,0},
    /*167*/{0,-4,39,-4,40,-4,41,-4,42,-4,43,-4,44,-4,-1,0},
  };

  /** access to parse action table */
  public short[][] action_table() {return _action_table;}

  /** reduce_goto table */
  protected static final short[][] _reduce_table = {
    /*0*/{1,8,2,3,-1,-1},
    /*1*/{5,161,41,13,-1,-1},
    /*2*/{-1,-1},
    /*3*/{-1,-1},
    /*4*/{-1,-1},
    /*5*/{-1,-1},
    /*6*/{39,133,-1,-1},
    /*7*/{5,18,41,13,-1,-1},
    /*8*/{2,9,-1,-1},
    /*9*/{-1,-1},
    /*10*/{-1,-1},
    /*11*/{-1,-1},
    /*12*/{-1,-1},
    /*13*/{5,132,41,13,-1,-1},
    /*14*/{-1,-1},
    /*15*/{-1,-1},
    /*16*/{-1,-1},
    /*17*/{-1,-1},
    /*18*/{39,19,-1,-1},
    /*19*/{-1,-1},
    /*20*/{-1,-1},
    /*21*/{-1,-1},
    /*22*/{-1,-1},
    /*23*/{-1,-1},
    /*24*/{-1,-1},
    /*25*/{-1,-1},
    /*26*/{-1,-1},
    /*27*/{-1,-1},
    /*28*/{17,30,-1,-1},
    /*29*/{3,124,39,123,-1,-1},
    /*30*/{27,32,-1,-1},
    /*31*/{14,50,16,57,19,40,21,51,22,47,24,48,25,33,27,53,28,56,29,39,30,36,31,37,32,54,35,35,-1,-1},
    /*32*/{-1,-1},
    /*33*/{-1,-1},
    /*34*/{-1,-1},
    /*35*/{-1,-1},
    /*36*/{-1,-1},
    /*37*/{-1,-1},
    /*38*/{-1,-1},
    /*39*/{-1,-1},
    /*40*/{-1,-1},
    /*41*/{-1,-1},
    /*42*/{14,111,19,40,21,51,22,47,24,48,25,33,27,53,28,56,29,39,30,36,31,37,32,54,35,35,-1,-1},
    /*43*/{-1,-1},
    /*44*/{-1,-1},
    /*45*/{-1,-1},
    /*46*/{14,94,19,40,21,51,22,47,24,48,25,33,27,53,28,56,29,39,30,36,31,37,32,54,35,35,-1,-1},
    /*47*/{-1,-1},
    /*48*/{-1,-1},
    /*49*/{-1,-1},
    /*50*/{-1,-1},
    /*51*/{-1,-1},
    /*52*/{-1,-1},
    /*53*/{-1,-1},
    /*54*/{-1,-1},
    /*55*/{-1,-1},
    /*56*/{-1,-1},
    /*57*/{14,59,19,40,21,51,22,47,24,48,25,33,27,53,28,56,29,39,30,36,31,37,32,54,35,35,-1,-1},
    /*58*/{-1,-1},
    /*59*/{-1,-1},
    /*60*/{14,83,19,40,21,51,22,47,24,48,25,33,27,53,28,56,29,39,30,36,31,37,32,54,35,35,-1,-1},
    /*61*/{14,82,19,40,21,51,22,47,24,48,25,33,27,53,28,56,29,39,30,36,31,37,32,54,35,35,-1,-1},
    /*62*/{14,81,19,40,21,51,22,47,24,48,25,33,27,53,28,56,29,39,30,36,31,37,32,54,35,35,-1,-1},
    /*63*/{14,80,19,40,21,51,22,47,24,48,25,33,27,53,28,56,29,39,30,36,31,37,32,54,35,35,-1,-1},
    /*64*/{14,79,19,40,21,51,22,47,24,48,25,33,27,53,28,56,29,39,30,36,31,37,32,54,35,35,-1,-1},
    /*65*/{14,78,19,40,21,51,22,47,24,48,25,33,27,53,28,56,29,39,30,36,31,37,32,54,35,35,-1,-1},
    /*66*/{14,77,19,40,21,51,22,47,24,48,25,33,27,53,28,56,29,39,30,36,31,37,32,54,35,35,-1,-1},
    /*67*/{14,76,19,40,21,51,22,47,24,48,25,33,27,53,28,56,29,39,30,36,31,37,32,54,35,35,-1,-1},
    /*68*/{14,75,19,40,21,51,22,47,24,48,25,33,27,53,28,56,29,39,30,36,31,37,32,54,35,35,-1,-1},
    /*69*/{14,74,19,40,21,51,22,47,24,48,25,33,27,53,28,56,29,39,30,36,31,37,32,54,35,35,-1,-1},
    /*70*/{14,73,19,40,21,51,22,47,24,48,25,33,27,53,28,56,29,39,30,36,31,37,32,54,35,35,-1,-1},
    /*71*/{14,72,19,40,21,51,22,47,24,48,25,33,27,53,28,56,29,39,30,36,31,37,32,54,35,35,-1,-1},
    /*72*/{-1,-1},
    /*73*/{-1,-1},
    /*74*/{-1,-1},
    /*75*/{-1,-1},
    /*76*/{-1,-1},
    /*77*/{-1,-1},
    /*78*/{-1,-1},
    /*79*/{-1,-1},
    /*80*/{-1,-1},
    /*81*/{-1,-1},
    /*82*/{-1,-1},
    /*83*/{-1,-1},
    /*84*/{-1,-1},
    /*85*/{-1,-1},
    /*86*/{-1,-1},
    /*87*/{14,88,19,40,21,51,22,47,24,48,25,33,27,53,28,56,29,39,30,36,31,37,32,54,35,35,-1,-1},
    /*88*/{-1,-1},
    /*89*/{14,90,19,40,21,51,22,47,24,48,25,33,27,53,28,56,29,39,30,36,31,37,32,54,35,35,-1,-1},
    /*90*/{-1,-1},
    /*91*/{14,92,19,40,21,51,22,47,24,48,25,33,27,53,28,56,29,39,30,36,31,37,32,54,35,35,-1,-1},
    /*92*/{-1,-1},
    /*93*/{-1,-1},
    /*94*/{-1,-1},
    /*95*/{-1,-1},
    /*96*/{14,97,19,40,21,51,22,47,24,48,25,33,27,53,28,56,29,39,30,36,31,37,32,54,35,35,-1,-1},
    /*97*/{-1,-1},
    /*98*/{-1,-1},
    /*99*/{-1,-1},
    /*100*/{14,50,16,102,19,40,21,51,22,47,24,48,25,33,27,53,28,56,29,39,30,36,31,37,32,54,35,35,-1,-1},
    /*101*/{-1,-1},
    /*102*/{14,59,19,40,21,51,22,47,24,48,25,33,27,53,28,56,29,39,30,36,31,37,32,54,35,35,-1,-1},
    /*103*/{-1,-1},
    /*104*/{14,105,19,40,21,51,22,47,24,48,25,33,27,53,28,56,29,39,30,36,31,37,32,54,35,35,-1,-1},
    /*105*/{-1,-1},
    /*106*/{14,107,19,40,21,51,22,47,24,48,25,33,27,53,28,56,29,39,30,36,31,37,32,54,35,35,-1,-1},
    /*107*/{-1,-1},
    /*108*/{14,109,19,40,21,51,22,47,24,48,25,33,27,53,28,56,29,39,30,36,31,37,32,54,35,35,-1,-1},
    /*109*/{-1,-1},
    /*110*/{-1,-1},
    /*111*/{-1,-1},
    /*112*/{-1,-1},
    /*113*/{14,114,19,40,21,51,22,47,24,48,25,33,27,53,28,56,29,39,30,36,31,37,32,54,35,35,-1,-1},
    /*114*/{-1,-1},
    /*115*/{14,116,19,40,21,51,22,47,24,48,25,33,27,53,28,56,29,39,30,36,31,37,32,54,35,35,-1,-1},
    /*116*/{-1,-1},
    /*117*/{14,120,19,40,21,51,22,47,24,48,25,33,27,53,28,56,29,39,30,36,31,37,32,54,35,35,-1,-1},
    /*118*/{-1,-1},
    /*119*/{-1,-1},
    /*120*/{-1,-1},
    /*121*/{-1,-1},
    /*122*/{-1,-1},
    /*123*/{-1,-1},
    /*124*/{-1,-1},
    /*125*/{-1,-1},
    /*126*/{39,128,-1,-1},
    /*127*/{-1,-1},
    /*128*/{-1,-1},
    /*129*/{-1,-1},
    /*130*/{-1,-1},
    /*131*/{-1,-1},
    /*132*/{-1,-1},
    /*133*/{-1,-1},
    /*134*/{-1,-1},
    /*135*/{-1,-1},
    /*136*/{-1,-1},
    /*137*/{7,139,39,138,-1,-1},
    /*138*/{-1,-1},
    /*139*/{39,140,-1,-1},
    /*140*/{-1,-1},
    /*141*/{-1,-1},
    /*142*/{-1,-1},
    /*143*/{-1,-1},
    /*144*/{-1,-1},
    /*145*/{-1,-1},
    /*146*/{-1,-1},
    /*147*/{7,148,39,138,-1,-1},
    /*148*/{39,140,-1,-1},
    /*149*/{-1,-1},
    /*150*/{-1,-1},
    /*151*/{13,153,-1,-1},
    /*152*/{-1,-1},
    /*153*/{-1,-1},
    /*154*/{-1,-1},
    /*155*/{-1,-1},
    /*156*/{-1,-1},
    /*157*/{14,158,19,40,21,51,22,47,24,48,25,33,27,53,28,56,29,39,30,36,31,37,32,54,35,35,-1,-1},
    /*158*/{-1,-1},
    /*159*/{14,160,19,40,21,51,22,47,24,48,25,33,27,53,28,56,29,39,30,36,31,37,32,54,35,35,-1,-1},
    /*160*/{-1,-1},
    /*161*/{39,162,-1,-1},
    /*162*/{-1,-1},
    /*163*/{15,164,-1,-1},
    /*164*/{-1,-1},
    /*165*/{14,166,19,40,21,51,22,47,24,48,25,33,27,53,28,56,29,39,30,36,31,37,32,54,35,35,-1,-1},
    /*166*/{-1,-1},
    /*167*/{-1,-1},
  };

  /** access to reduce_goto table */
  public short[][] reduce_table() {return _reduce_table;}

  /** instance of action encapsulation class */
  protected CUP$Grm$actions action_obj;

  /** action encapsulation object initializer */
  protected void init_actions()
    {
      action_obj = new CUP$Grm$actions();
    }

  /** invoke a user supplied parse action */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Grm$do_action(act_num, parser, stack, top);
  }

  /** start state */
  public int start_state() {return 0;}
  /** start production */
  public int start_production() {return 0;}

  /** EOF Symbol index */
  public int EOF_sym() {return 0;}

  /** error Symbol index */
  public int error_sym() {return 1;}


  /** scan to get the next Symbol */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return lexer.nextToken(); 
    }


Lexer lexer;

public void syntax_error(java_cup.runtime.Symbol current) {
report_error("Syntax error (" + current.sym + ")", current);
}

ErrorMsg.ErrorMsg errorMsg;

public void report_error(String message, java_cup.runtime.Symbol info) {
errorMsg.error(info.left, message);
}

public Grm(Lexer l, ErrorMsg.ErrorMsg err) {
this();
errorMsg=err;
lexer=l;
}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Grm$actions {


static Symbol.Symbol sym(String s) {
return Symbol.Symbol.symbol(s);
}


  /** Constructor */
  CUP$Grm$actions() { }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Grm$do_action(
    int                        CUP$Grm$act_num,
    java_cup.runtime.lr_parser CUP$Grm$parser,
    java.util.Stack            CUP$Grm$stack,
    int                        CUP$Grm$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Grm$result;

      /* select the action based on the action number */
      switch (CUP$Grm$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // EnumList ::= EnumList COMMA ID ASSIGN Exp 
            {
              ArrayList RESULT = null;
		int elleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).right;
		ArrayList el = (ArrayList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 el.add(i);
       RESULT = el; 
              CUP$Grm$result = new java_cup.runtime.Symbol(13/*EnumList*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // EnumList ::= ID ASSIGN Exp 
            {
              ArrayList RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 ArrayList<String> list = new ArrayList<>();
       list.add(i);
       RESULT = list; 
              CUP$Grm$result = new java_cup.runtime.Symbol(13/*EnumList*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // EnumList ::= EnumList COMMA ID 
            {
              ArrayList RESULT = null;
		int elleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		ArrayList el = (ArrayList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 el.add(i);
       RESULT = el; 
              CUP$Grm$result = new java_cup.runtime.Symbol(13/*EnumList*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // EnumList ::= ID 
            {
              ArrayList RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 ArrayList<String> list = new ArrayList<>();
       list.add(i);
       RESULT = list; 
              CUP$Grm$result = new java_cup.runtime.Symbol(13/*EnumList*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // StructDecList ::= StructDecList Type ID SEMICOLON 
            {
              ArrayList RESULT = null;
		int slleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).right;
		ArrayList sl = (ArrayList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.NameTy t = (Absyn.NameTy)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		 sl.add(new Absyn.FieldList(tleft, Symbol.Symbol.symbol(n), t.name, null));
       RESULT = sl; 
              CUP$Grm$result = new java_cup.runtime.Symbol(7/*StructDecList*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // StructDecList ::= Type ID SEMICOLON 
            {
              ArrayList RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.NameTy t = (Absyn.NameTy)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		 ArrayList<Absyn.FieldList> list = new ArrayList<>();
       list.add(new Absyn.FieldList(tleft, Symbol.Symbol.symbol(n), t.name, null));
       RESULT = list; 
              CUP$Grm$result = new java_cup.runtime.Symbol(7/*StructDecList*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // SubscriptVar ::= Var LBRACK Exp RBRACK 
            {
              Absyn.SubscriptVar RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).right;
		Absyn.Var v = (Absyn.Var)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Absyn.Exp e = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		 RESULT = new Absyn.SubscriptVar(vleft, v, e); 
              CUP$Grm$result = new java_cup.runtime.Symbol(30/*SubscriptVar*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // FieldVar ::= Var DOT ID 
            {
              Absyn.FieldVar RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Var v = (Absyn.Var)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.FieldVar(vleft, v, Symbol.Symbol.symbol(i)); 
              CUP$Grm$result = new java_cup.runtime.Symbol(19/*FieldVar*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // For ::= FOR LPAREN VAR ID ASSIGN Exp TO Exp RPAREN Exp 
            {
              Absyn.ForExp RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-9)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-9)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-9)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-6)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-6)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).right;
		Absyn.Exp i = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-4)).value;
		int hileft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int hiright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp hi = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp body = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 Absyn.VarDec var = new Absyn.VarDec(nleft, Symbol.Symbol.symbol(n),
                                          new Absyn.NameTy(nleft, Symbol.Symbol.symbol("int")), i);
       RESULT = new Absyn.ForExp(fleft, var, hi, body); 
              CUP$Grm$result = new java_cup.runtime.Symbol(20/*For*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-9)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // While ::= WHILE LPAREN Exp RPAREN Exp 
            {
              Absyn.WhileExp RESULT = null;
		int wleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).right;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-4)).value;
		int testleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int testright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp test = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp body = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.WhileExp(wleft, test, body); 
              CUP$Grm$result = new java_cup.runtime.Symbol(33/*While*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // If ::= IF LPAREN Exp RPAREN Exp 
            {
              Absyn.IfExp RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-4)).value;
		int testleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int testright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp test = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int thenleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int thenright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp then = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.IfExp(ileft, test, then); 
              CUP$Grm$result = new java_cup.runtime.Symbol(21/*If*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // If ::= IF LPAREN Exp RPAREN Exp ELSE Exp 
            {
              Absyn.IfExp RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-6)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-6)).value;
		int testleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).left;
		int testright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).right;
		Absyn.Exp test = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-4)).value;
		int thenleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int thenright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp then = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int else_expleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int else_expright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp else_exp = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.IfExp(ileft, test, then, else_exp); 
              CUP$Grm$result = new java_cup.runtime.Symbol(21/*If*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-6)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // Call ::= ID LPAREN RPAREN 
            {
              Absyn.CallExp RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		 RESULT = new Absyn.CallExp(ileft, Symbol.Symbol.symbol(i), null); 
              CUP$Grm$result = new java_cup.runtime.Symbol(35/*Call*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // Call ::= ID LPAREN ExpList RPAREN 
            {
              Absyn.CallExp RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-3)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Absyn.ExpList el = (Absyn.ExpList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		 RESULT = new Absyn.CallExp(ileft, Symbol.Symbol.symbol(i), el); 
              CUP$Grm$result = new java_cup.runtime.Symbol(35/*Call*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Nil ::= VOID 
            {
              Absyn.NilExp RESULT = null;
		 RESULT = new Absyn.NilExp(0); 
              CUP$Grm$result = new java_cup.runtime.Symbol(24/*Nil*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Params ::= LPAREN RPAREN 
            {
              Absyn.FieldList RESULT = null;
		 RESULT = null; 
              CUP$Grm$result = new java_cup.runtime.Symbol(17/*Params*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Params ::= LPAREN ParamList RPAREN 
            {
              Absyn.FieldList RESULT = null;
		int plleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		ArrayList pl = (ArrayList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		
        Absyn.FieldList result = null;
        for(int i = pl.size()-1; i >= 0; i--) {
            Absyn.FieldList fl = (Absyn.FieldList)pl.get(i);
            fl.tail = result;
            result = fl;
        }
        RESULT = result;
    
              CUP$Grm$result = new java_cup.runtime.Symbol(17/*Params*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // IntExp ::= DECIMAL_LITERAL 
            {
              Absyn.IntExp RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.IntExp(nleft, n); 
              CUP$Grm$result = new java_cup.runtime.Symbol(22/*IntExp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // VarExp ::= Var 
            {
              Absyn.VarExp RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Var v = (Absyn.Var)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.VarExp(vleft, v); 
              CUP$Grm$result = new java_cup.runtime.Symbol(32/*VarExp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // SimpleVar ::= ID 
            {
              Absyn.SimpleVar RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.SimpleVar(ileft, Symbol.Symbol.symbol(i)); 
              CUP$Grm$result = new java_cup.runtime.Symbol(28/*SimpleVar*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Var ::= SubscriptVar 
            {
              Absyn.Var RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.SubscriptVar v = (Absyn.SubscriptVar)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = v; 
              CUP$Grm$result = new java_cup.runtime.Symbol(31/*Var*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Var ::= FieldVar 
            {
              Absyn.Var RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.FieldVar v = (Absyn.FieldVar)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = v; 
              CUP$Grm$result = new java_cup.runtime.Symbol(31/*Var*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Var ::= SimpleVar 
            {
              Absyn.Var RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.SimpleVar v = (Absyn.SimpleVar)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = v; 
              CUP$Grm$result = new java_cup.runtime.Symbol(31/*Var*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // ExpList ::= ExpList Exp 
            {
              Absyn.ExpList RESULT = null;
		int elleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Absyn.ExpList el = (Absyn.ExpList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.ExpList(e, el); 
              CUP$Grm$result = new java_cup.runtime.Symbol(16/*ExpList*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // ExpList ::= Exp 
            {
              Absyn.ExpList RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.ExpList(e, null); 
              CUP$Grm$result = new java_cup.runtime.Symbol(16/*ExpList*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Seq ::= LBRACE ExpList RBRACE 
            {
              Absyn.SeqExp RESULT = null;
		int elleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Absyn.ExpList el = (Absyn.ExpList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		 RESULT = new Absyn.SeqExp(elleft, el); 
              CUP$Grm$result = new java_cup.runtime.Symbol(27/*Seq*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // StringExp ::= STRING_LITERAL 
            {
              Absyn.StringExp RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.StringExp(sleft, s); 
              CUP$Grm$result = new java_cup.runtime.Symbol(29/*StringExp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // OpExp ::= Exp OR Exp 
            {
              Absyn.OpExp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp e1 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e2 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.OpExp(oleft, e1, Absyn.OpExp.OR, e2); 
              CUP$Grm$result = new java_cup.runtime.Symbol(25/*OpExp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // OpExp ::= Exp AND Exp 
            {
              Absyn.OpExp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp e1 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e2 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.OpExp(aleft, e1, Absyn.OpExp.AND, e2); 
              CUP$Grm$result = new java_cup.runtime.Symbol(25/*OpExp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // OpExp ::= Exp GE Exp 
            {
              Absyn.OpExp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp e1 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int geleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int geright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Object ge = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e2 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.OpExp(geleft, e1, Absyn.OpExp.GE, e2); 
              CUP$Grm$result = new java_cup.runtime.Symbol(25/*OpExp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // OpExp ::= Exp GT Exp 
            {
              Absyn.OpExp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp e1 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int gtleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int gtright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Object gt = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e2 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.OpExp(gtleft, e1, Absyn.OpExp.GT, e2); 
              CUP$Grm$result = new java_cup.runtime.Symbol(25/*OpExp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // OpExp ::= Exp LE Exp 
            {
              Absyn.OpExp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp e1 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int leleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int leright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Object le = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e2 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.OpExp(leleft, e1, Absyn.OpExp.LE, e2); 
              CUP$Grm$result = new java_cup.runtime.Symbol(25/*OpExp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // OpExp ::= Exp LT Exp 
            {
              Absyn.OpExp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp e1 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int ltleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int ltright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Object lt = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e2 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.OpExp(ltleft, e1, Absyn.OpExp.LT, e2); 
              CUP$Grm$result = new java_cup.runtime.Symbol(25/*OpExp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // OpExp ::= Exp NEQ Exp 
            {
              Absyn.OpExp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp e1 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int neleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int neright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Object ne = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e2 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.OpExp(neleft, e1, Absyn.OpExp.NE, e2); 
              CUP$Grm$result = new java_cup.runtime.Symbol(25/*OpExp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // OpExp ::= Exp EQ Exp 
            {
              Absyn.OpExp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp e1 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int eqleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int eqright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Object eq = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e2 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.OpExp(eqleft, e1, Absyn.OpExp.EQ, e2); 
              CUP$Grm$result = new java_cup.runtime.Symbol(25/*OpExp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // OpExp ::= Exp DIVIDE Exp 
            {
              Absyn.OpExp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp e1 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e2 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.OpExp(dleft, e1, Absyn.OpExp.DIV, e2); 
              CUP$Grm$result = new java_cup.runtime.Symbol(25/*OpExp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // OpExp ::= Exp TIMES Exp 
            {
              Absyn.OpExp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp e1 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e2 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.OpExp(tleft, e1, Absyn.OpExp.MUL, e2); 
              CUP$Grm$result = new java_cup.runtime.Symbol(25/*OpExp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // OpExp ::= Exp MINUS Exp 
            {
              Absyn.OpExp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp e1 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e2 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.OpExp(mleft, e1, Absyn.OpExp.MINUS, e2); 
              CUP$Grm$result = new java_cup.runtime.Symbol(25/*OpExp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // OpExp ::= Exp PLUS Exp 
            {
              Absyn.OpExp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp e1 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e2 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.OpExp(pleft, e1, Absyn.OpExp.PLUS, e2); 
              CUP$Grm$result = new java_cup.runtime.Symbol(25/*OpExp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Return ::= RETURN SEMICOLON 
            {
              Absyn.Exp RESULT = null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		 RESULT = new Absyn.NilExp(rleft); 
              CUP$Grm$result = new java_cup.runtime.Symbol(38/*Return*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Return ::= RETURN Exp SEMICOLON 
            {
              Absyn.Exp RESULT = null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Absyn.Exp e = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		 RESULT = e; 
              CUP$Grm$result = new java_cup.runtime.Symbol(38/*Return*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Continue ::= CONTINUE SEMICOLON 
            {
              Absyn.Exp RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		 RESULT = null; 
              CUP$Grm$result = new java_cup.runtime.Symbol(37/*Continue*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Break ::= BREAK SEMICOLON 
            {
              Absyn.BreakExp RESULT = null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		 RESULT = new Absyn.BreakExp(bleft); 
              CUP$Grm$result = new java_cup.runtime.Symbol(36/*Break*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // DoWhile ::= DO Exp WHILE LPAREN Exp RPAREN SEMICOLON 
            {
              Absyn.WhileExp RESULT = null;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).right;
		Absyn.Exp body = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-5)).value;
		int testleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int testright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp test = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		 RESULT = new Absyn.WhileExp(doleft, test, body); 
              CUP$Grm$result = new java_cup.runtime.Symbol(34/*DoWhile*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-6)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Exp ::= Nil 
            {
              Absyn.Exp RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.NilExp n = (Absyn.NilExp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = n; 
              CUP$Grm$result = new java_cup.runtime.Symbol(14/*Exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Exp ::= Seq 
            {
              Absyn.Exp RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.SeqExp c = (Absyn.SeqExp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = c; 
              CUP$Grm$result = new java_cup.runtime.Symbol(14/*Exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Exp ::= RETURN SEMICOLON 
            {
              Absyn.Exp RESULT = null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		 RESULT = new Absyn.NilExp(rleft); 
              CUP$Grm$result = new java_cup.runtime.Symbol(14/*Exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Exp ::= RETURN Exp SEMICOLON 
            {
              Absyn.Exp RESULT = null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Absyn.Exp e = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		 RESULT = e; 
              CUP$Grm$result = new java_cup.runtime.Symbol(14/*Exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Exp ::= CONTINUE SEMICOLON 
            {
              Absyn.Exp RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		 RESULT = new Absyn.NilExp(cleft); 
              CUP$Grm$result = new java_cup.runtime.Symbol(14/*Exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Exp ::= BREAK SEMICOLON 
            {
              Absyn.Exp RESULT = null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		 RESULT = new Absyn.BreakExp(bleft); 
              CUP$Grm$result = new java_cup.runtime.Symbol(14/*Exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Exp ::= FOR LPAREN VAR ID ASSIGN Exp TO Exp RPAREN Exp 
            {
              Absyn.Exp RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-9)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-9)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-9)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-6)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-6)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).right;
		Absyn.Exp i = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-4)).value;
		int hileft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int hiright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp hi = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp body = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 Absyn.VarDec var = new Absyn.VarDec(nleft, Symbol.Symbol.symbol(n),
                                          new Absyn.NameTy(nleft, Symbol.Symbol.symbol("int")), i);
       RESULT = new Absyn.ForExp(fleft, var, hi, body); 
              CUP$Grm$result = new java_cup.runtime.Symbol(14/*Exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-9)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Exp ::= DO Exp WHILE LPAREN Exp RPAREN SEMICOLON 
            {
              Absyn.Exp RESULT = null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-6)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-6)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-6)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).right;
		Absyn.Exp body = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-5)).value;
		int testleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int testright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp test = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		 RESULT = new Absyn.WhileExp(dleft, test, body); 
              CUP$Grm$result = new java_cup.runtime.Symbol(14/*Exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-6)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Exp ::= WHILE LPAREN Exp RPAREN Exp 
            {
              Absyn.Exp RESULT = null;
		int wleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).right;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-4)).value;
		int testleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int testright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp test = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp body = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.WhileExp(wleft, test, body); 
              CUP$Grm$result = new java_cup.runtime.Symbol(14/*Exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Exp ::= If 
            {
              Absyn.Exp RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.IfExp i = (Absyn.IfExp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = i; 
              CUP$Grm$result = new java_cup.runtime.Symbol(14/*Exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Exp ::= Call 
            {
              Absyn.Exp RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.CallExp f = (Absyn.CallExp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = f; 
              CUP$Grm$result = new java_cup.runtime.Symbol(14/*Exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Exp ::= OpExp 
            {
              Absyn.Exp RESULT = null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.OpExp o = (Absyn.OpExp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = o; 
              CUP$Grm$result = new java_cup.runtime.Symbol(14/*Exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Exp ::= VarExp 
            {
              Absyn.Exp RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.VarExp v = (Absyn.VarExp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = v; 
              CUP$Grm$result = new java_cup.runtime.Symbol(14/*Exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Exp ::= StringExp 
            {
              Absyn.Exp RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.StringExp s = (Absyn.StringExp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = s; 
              CUP$Grm$result = new java_cup.runtime.Symbol(14/*Exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Exp ::= IntExp 
            {
              Absyn.Exp RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.IntExp i = (Absyn.IntExp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = i; 
              CUP$Grm$result = new java_cup.runtime.Symbol(14/*Exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Bitfield ::= REGISTER 
            {
              String RESULT = null;
		 RESULT = "register"; 
              CUP$Grm$result = new java_cup.runtime.Symbol(41/*Bitfield*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Bitfield ::= AUTO 
            {
              String RESULT = null;
		 RESULT = "auto"; 
              CUP$Grm$result = new java_cup.runtime.Symbol(41/*Bitfield*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Bitfield ::= STATIC 
            {
              String RESULT = null;
		 RESULT = "static"; 
              CUP$Grm$result = new java_cup.runtime.Symbol(41/*Bitfield*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Bitfield ::= EXTERN 
            {
              String RESULT = null;
		 RESULT = "extern"; 
              CUP$Grm$result = new java_cup.runtime.Symbol(41/*Bitfield*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Bitfield ::= VOLATILE 
            {
              String RESULT = null;
		 RESULT = "volatile"; 
              CUP$Grm$result = new java_cup.runtime.Symbol(41/*Bitfield*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Bitfield ::= CONST 
            {
              String RESULT = null;
		 RESULT = "const"; 
              CUP$Grm$result = new java_cup.runtime.Symbol(41/*Bitfield*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Type ::= ID 
            {
              Absyn.NameTy RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.NameTy(0, Symbol.Symbol.symbol(i)); 
              CUP$Grm$result = new java_cup.runtime.Symbol(39/*Type*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Type ::= DOUBLE 
            {
              Absyn.NameTy RESULT = null;
		 RESULT = new Absyn.NameTy(0, Symbol.Symbol.symbol("double")); 
              CUP$Grm$result = new java_cup.runtime.Symbol(39/*Type*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Type ::= FLOAT 
            {
              Absyn.NameTy RESULT = null;
		 RESULT = new Absyn.NameTy(0, Symbol.Symbol.symbol("float")); 
              CUP$Grm$result = new java_cup.runtime.Symbol(39/*Type*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Type ::= LONG 
            {
              Absyn.NameTy RESULT = null;
		 RESULT = new Absyn.NameTy(0, Symbol.Symbol.symbol("long")); 
              CUP$Grm$result = new java_cup.runtime.Symbol(39/*Type*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Type ::= INT 
            {
              Absyn.NameTy RESULT = null;
		 RESULT = new Absyn.NameTy(0, Symbol.Symbol.symbol("int")); 
              CUP$Grm$result = new java_cup.runtime.Symbol(39/*Type*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Type ::= SHORT 
            {
              Absyn.NameTy RESULT = null;
		 RESULT = new Absyn.NameTy(0, Symbol.Symbol.symbol("short")); 
              CUP$Grm$result = new java_cup.runtime.Symbol(39/*Type*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Type ::= CHAR 
            {
              Absyn.NameTy RESULT = null;
		 RESULT = new Absyn.NameTy(0, Symbol.Symbol.symbol("char")); 
              CUP$Grm$result = new java_cup.runtime.Symbol(39/*Type*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Type ::= VOID 
            {
              Absyn.NameTy RESULT = null;
		 RESULT = new Absyn.NameTy(0, Symbol.Symbol.symbol("void")); 
              CUP$Grm$result = new java_cup.runtime.Symbol(39/*Type*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Init ::= 
            {
              Absyn.Exp RESULT = null;
		 RESULT = null; 
              CUP$Grm$result = new java_cup.runtime.Symbol(15/*Init*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Init ::= ASSIGN Exp 
            {
              Absyn.Exp RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = e; 
              CUP$Grm$result = new java_cup.runtime.Symbol(15/*Init*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // BitfieldList ::= Bitfield BitfieldList 
            {
              ArrayList RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		ArrayList l = (ArrayList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 l.add(0, v);
       RESULT = l; 
              CUP$Grm$result = new java_cup.runtime.Symbol(5/*BitfieldList*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // BitfieldList ::= 
            {
              ArrayList RESULT = null;
		 RESULT = new ArrayList<>(); 
              CUP$Grm$result = new java_cup.runtime.Symbol(5/*BitfieldList*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // ParamList ::= ParamList COMMA ELIPSES 
            {
              ArrayList RESULT = null;
		int plleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		ArrayList pl = (ArrayList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		 RESULT = pl; 
              CUP$Grm$result = new java_cup.runtime.Symbol(3/*ParamList*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // ParamList ::= ParamList COMMA Type ID 
            {
              ArrayList RESULT = null;
		int plleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).right;
		ArrayList pl = (ArrayList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Absyn.NameTy t = (Absyn.NameTy)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 pl.add(new Absyn.FieldList(tleft, Symbol.Symbol.symbol(n), t.name, null));
       RESULT = pl; 
              CUP$Grm$result = new java_cup.runtime.Symbol(3/*ParamList*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // ParamList ::= Type ID 
            {
              ArrayList RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Absyn.NameTy t = (Absyn.NameTy)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 ArrayList<Absyn.FieldList> list = new ArrayList<>();
       list.add(new Absyn.FieldList(tleft, Symbol.Symbol.symbol(n), t.name, null));
       RESULT = list; 
              CUP$Grm$result = new java_cup.runtime.Symbol(3/*ParamList*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Dec ::= ENUM ID LBRACE EnumList RBRACE 
            {
              Absyn.Dec RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-4)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-3)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		ArrayList el = (ArrayList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		 RESULT = new Absyn.TypeDec(eleft, Symbol.Symbol.symbol(n),
        new Absyn.NameTy(eleft, Symbol.Symbol.symbol("int")), null); 
              CUP$Grm$result = new java_cup.runtime.Symbol(2/*Dec*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Dec ::= UNION ID LBRACE StructDecList RBRACE 
            {
              Absyn.Dec RESULT = null;
		int uleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).right;
		Object u = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-4)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-3)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		ArrayList sl = (ArrayList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		
        Absyn.FieldList fields = null;
        for(int i = sl.size()-1; i >= 0; i--) {
            Absyn.FieldList fl = (Absyn.FieldList)sl.get(i);
            fl.tail = fields;
            fields = fl;
        }
        RESULT = new Absyn.TypeDec(uleft, Symbol.Symbol.symbol(n),
            new Absyn.RecordTy(uleft, fields), null);
    
              CUP$Grm$result = new java_cup.runtime.Symbol(2/*Dec*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Dec ::= STRUCT ID LBRACE StructDecList RBRACE 
            {
              Absyn.Dec RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-4)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-3)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		ArrayList sl = (ArrayList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		
        Absyn.FieldList fields = null;
        for(int i = sl.size()-1; i >= 0; i--) {
            Absyn.FieldList fl = (Absyn.FieldList)sl.get(i);
            fl.tail = fields;
            fields = fl;
        }
        RESULT = new Absyn.TypeDec(sleft, Symbol.Symbol.symbol(n),
            new Absyn.RecordTy(sleft, fields), null);
    
              CUP$Grm$result = new java_cup.runtime.Symbol(2/*Dec*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Dec ::= TYPEDEF Type ID SEMICOLON 
            {
              Absyn.Dec RESULT = null;
		int tdleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).right;
		Object td = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.NameTy t = (Absyn.NameTy)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		 RESULT = new Absyn.TypeDec(tdleft, Symbol.Symbol.symbol(n), t, null); 
              CUP$Grm$result = new java_cup.runtime.Symbol(2/*Dec*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Dec ::= FUN BitfieldList Type ID Params Seq 
            {
              Absyn.Dec RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).right;
		ArrayList b = (ArrayList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-4)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).right;
		Absyn.NameTy r = (Absyn.NameTy)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Absyn.FieldList p = (Absyn.FieldList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.SeqExp c = (Absyn.SeqExp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.FunctionDec(fleft, Symbol.Symbol.symbol(n), p, r, c, null); 
              CUP$Grm$result = new java_cup.runtime.Symbol(2/*Dec*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Dec ::= VAR BitfieldList Type ID Init SEMICOLON 
            {
              Absyn.Dec RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).right;
		ArrayList b = (ArrayList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).right;
		Absyn.NameTy t = (Absyn.NameTy)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Absyn.Exp i = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		 RESULT = new Absyn.VarDec(vleft, Symbol.Symbol.symbol(n), t, i); 
              CUP$Grm$result = new java_cup.runtime.Symbol(2/*Dec*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // DecList ::= DecList Dec 
            {
              Absyn.DecList RESULT = null;
		int dlleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int dlright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Absyn.DecList dl = (Absyn.DecList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Dec d = (Absyn.Dec)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.DecList(d, dl); 
              CUP$Grm$result = new java_cup.runtime.Symbol(1/*DecList*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // DecList ::= Dec 
            {
              Absyn.DecList RESULT = null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Dec d = (Absyn.Dec)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.DecList(d, null); 
              CUP$Grm$result = new java_cup.runtime.Symbol(1/*DecList*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= DecList EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Absyn.DecList start_val = (Absyn.DecList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		RESULT = start_val;
              CUP$Grm$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$Grm$parser.done_parsing();
          return CUP$Grm$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

