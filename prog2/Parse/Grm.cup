package Parse;

action code {: static Symbol.Symbol sym(String s) {
	         return Symbol.Symbol.symbol(s);
	        }
	    :};

parser code  {: 
  Lexer lexer;

  public void syntax_error(java_cup.runtime.Symbol current) {
   report_error("Syntax error (" + current.sym + ")", current);
  }

  ErrorMsg.ErrorMsg errorMsg;

  public void report_error(String message, java_cup.runtime.Symbol info) {
      errorMsg.error(info.left, message);
  }

  public Grm(Lexer l, ErrorMsg.ErrorMsg err) {
    this();
    errorMsg=err;
    lexer=l;
  }
:};

scan with {: return lexer.nextToken(); :};

/* Terminals */
terminal String ID, STRING_LITERAL;
terminal Integer DECIMAL_LITERAL;
terminal Character CHAR_LITERAL;

/* Keywords */
terminal VAR, FUN, TYPEDEF;
terminal CONST, VOLATILE, EXTERN, STATIC, AUTO, REGISTER;
terminal VOID, CHAR, SHORT, INT, LONG, FLOAT, DOUBLE;
terminal STRUCT, UNION, ENUM;
terminal IF, ELSE, WHILE, FOR, DO;
terminal BREAK, CONTINUE, RETURN, GOTO;
terminal SIZEOF;

/* Operators */
terminal PLUS, MINUS, TIMES, DIVIDE;
terminal EQ, NEQ, LT, LE, GT, GE;
terminal AND, OR, NOT;
terminal ASSIGN;
terminal MODULUS;
terminal TILDE;
terminal BWISEOR, BWISEXOR, BITWISEAND;

/* Compound Assignment Operators */
terminal ADDASSIGN, SUBASSIGN, MULASSIGN, DIVASSIGN, MODASSIGN;
terminal BWISEANDASSIGN, BWISEORASSIGN, BWISEXORASSIGN;
terminal LSHIFTASSIGN, RSHIFTASSIGN;

/* Shift Operators */
terminal LSHIFT, RSHIFT;

/* Increment/Decrement */
terminal INCREMENT, DECREMENT;

/* Punctuation */
terminal COMMA, COLON, SEMICOLON;
terminal LPAREN, RPAREN;
terminal LBRACK, RBRACK;
terminal LBRACE, RBRACE;
terminal PERIOD, ARROW;
terminal ELIPSES;

non terminal Absyn.Exp          Exp;
non terminal Absyn.Var          Var;

start with Exp;

Exp ::= error:e
	  {: RESULT = new Absyn.SeqExp(eleft, null); :}
	| Var:v
	  {: RESULT = new Absyn.VarExp(vleft, v); :}
	;

Var ::=   ID:n
	  {: RESULT = new Absyn.SimpleVar(nleft, sym(n)); :}
	;
