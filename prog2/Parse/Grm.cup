package Parse;
import java.util.ArrayList;

action code {:
static Symbol.Symbol sym(String s) {
return Symbol.Symbol.symbol(s);
}
:};

parser code {:
Lexer lexer;

public void syntax_error(java_cup.runtime.Symbol current) {
report_error("Syntax error (" + current.sym + ")", current);
}

ErrorMsg.ErrorMsg errorMsg;

public void report_error(String message, java_cup.runtime.Symbol info) {
errorMsg.error(info.left, message);
}

public Grm(Lexer l, ErrorMsg.ErrorMsg err) {
this();
errorMsg=err;
lexer=l;
}
:};

scan with {: return lexer.nextToken(); :};

terminal String ID, STRING_LITERAL;
terminal Integer DECIMAL_LITERAL;
terminal char CHAR_LITERAL;
terminal SEMICOLON, COMMA, LPAREN, RPAREN, LBRACE, RBRACE, LBRACK, RBRACK,
        DOT, PLUS, MINUS, TIMES, DIVIDE, MODULUS, EQ, NEQ, LT, LE, GT, GE,
        AND, OR, ASSIGN, ELIPSES, TO, IF, ELSE, WHILE, DO, FOR, BREAK,
        CONTINUE, RETURN, VAR, FUN, TYPEDEF, STRUCT, UNION, ENUM, CONST,
        VOLATILE, EXTERN, STATIC, AUTO, REGISTER, VOID, CHAR, SHORT, INT,
        LONG, FLOAT, DOUBLE;

non terminal Absyn.DecList DecList;
non terminal Absyn.Dec Dec;
non terminal ArrayList ParamList;
non terminal ArrayList TypeParams;
non terminal ArrayList BitfieldList;
non terminal ArrayList InitList;
non terminal ArrayList StructDecList;
non terminal ArrayList EmptyArrayList;
non terminal ArrayList ExpArrayList;
non terminal ArrayList PtrList;
non terminal ArrayList BracketList;
non terminal ArrayList ParamTypeList;
non terminal ArrayList EnumList;
non terminal Absyn.Exp Exp;
non terminal Absyn.Exp Init;
non terminal Absyn.ExpList ExpList;
non terminal Absyn.FieldList Params;
non terminal Absyn.FieldList Fields;
non terminal Absyn.FieldVar FieldVar;
non terminal Absyn.ForExp For;
non terminal Absyn.IfExp If;
non terminal Absyn.IntExp IntExp;
non terminal Absyn.LetExp Let;
non terminal Absyn.NilExp Nil;
non terminal Absyn.OpExp OpExp;
non terminal Absyn.RecordExp Record;
non terminal Absyn.SeqExp Seq;
non terminal Absyn.SimpleVar SimpleVar;
non terminal Absyn.StringExp StringExp;
non terminal Absyn.SubscriptVar SubscriptVar;
non terminal Absyn.Var Var;
non terminal Absyn.VarExp VarExp;
non terminal Absyn.WhileExp While;
non terminal Absyn.WhileExp DoWhile;
non terminal Absyn.CallExp Call;
non terminal Absyn.BreakExp Break;
non terminal Absyn.Exp Continue;
non terminal Absyn.Exp Return;
non terminal Absyn.NameTy Type;
non terminal String Name;
non terminal String Bitfield;
non terminal String StructOrUnion;
non terminal String EmptyArray;
non terminal String Enum;

precedence nonassoc ELSE;
precedence right ASSIGN;
precedence left OR;
precedence left AND;
precedence left EQ, NEQ;
precedence left LT, LE, GT, GE;
precedence left PLUS, MINUS;
precedence left TIMES, DIVIDE, MODULUS;
precedence left LBRACK, RBRACK, DOT;
precedence left LPAREN, RPAREN;
precedence nonassoc ID, STRING_LITERAL, DECIMAL_LITERAL, VOID;

start with DecList;

DecList ::= Dec:d
    {: RESULT = new Absyn.DecList(d, null); :}
    | DecList:dl Dec:d
    {: RESULT = new Absyn.DecList(d, dl); :}
    ;

Dec ::= VAR:v BitfieldList:b Type:t ID:n Init:i SEMICOLON
    {: RESULT = new Absyn.VarDec(vleft, Symbol.Symbol.symbol(n), t, i); :}
    | FUN:f BitfieldList:b Type:r ID:n Params:p Seq:c
    {: RESULT = new Absyn.FunctionDec(fleft, Symbol.Symbol.symbol(n), p, r, c, null); :}
    | TYPEDEF:td Type:t ID:n SEMICOLON
    {: RESULT = new Absyn.TypeDec(tdleft, Symbol.Symbol.symbol(n), t, null); :}
    | STRUCT:s ID:n LBRACE StructDecList:sl RBRACE
    {:
        Absyn.FieldList fields = null;
        for(int i = sl.size()-1; i >= 0; i--) {
            Absyn.FieldList fl = (Absyn.FieldList)sl.get(i);
            fl.tail = fields;
            fields = fl;
        }
        RESULT = new Absyn.TypeDec(sleft, Symbol.Symbol.symbol(n),
            new Absyn.RecordTy(sleft, fields), null);
    :}
    | UNION:u ID:n LBRACE StructDecList:sl RBRACE
    {:
        Absyn.FieldList fields = null;
        for(int i = sl.size()-1; i >= 0; i--) {
            Absyn.FieldList fl = (Absyn.FieldList)sl.get(i);
            fl.tail = fields;
            fields = fl;
        }
        RESULT = new Absyn.TypeDec(uleft, Symbol.Symbol.symbol(n),
            new Absyn.RecordTy(uleft, fields), null);
    :}
    | ENUM:e ID:n LBRACE EnumList:el RBRACE
    {: RESULT = new Absyn.TypeDec(eleft, Symbol.Symbol.symbol(n),
        new Absyn.NameTy(eleft, Symbol.Symbol.symbol("int")), null); :}
    ;

ParamList ::= Type:t ID:n
    {: ArrayList<Absyn.FieldList> list = new ArrayList<>();
       list.add(new Absyn.FieldList(tleft, Symbol.Symbol.symbol(n), t.name, null));
       RESULT = list; :}
    | ParamList:pl COMMA Type:t ID:n
    {: pl.add(new Absyn.FieldList(tleft, Symbol.Symbol.symbol(n), t.name, null));
       RESULT = pl; :}
    | ParamList:pl COMMA ELIPSES
    {: RESULT = pl; :}
    ;

BitfieldList ::=
    {: RESULT = new ArrayList<>(); :}
    | Bitfield:v BitfieldList:l
    {: l.add(0, v);
       RESULT = l; :}
    ;

Init ::= ASSIGN Exp:e
    {: RESULT = e; :}
    |
    {: RESULT = null; :}
    ;

Type ::= VOID
    {: RESULT = new Absyn.NameTy(0, Symbol.Symbol.symbol("void")); :}
    | CHAR
    {: RESULT = new Absyn.NameTy(0, Symbol.Symbol.symbol("char")); :}
    | SHORT
    {: RESULT = new Absyn.NameTy(0, Symbol.Symbol.symbol("short")); :}
    | INT
    {: RESULT = new Absyn.NameTy(0, Symbol.Symbol.symbol("int")); :}
    | LONG
    {: RESULT = new Absyn.NameTy(0, Symbol.Symbol.symbol("long")); :}
    | FLOAT
    {: RESULT = new Absyn.NameTy(0, Symbol.Symbol.symbol("float")); :}
    | DOUBLE
    {: RESULT = new Absyn.NameTy(0, Symbol.Symbol.symbol("double")); :}
    | ID:i
    {: RESULT = new Absyn.NameTy(0, Symbol.Symbol.symbol(i)); :}
    ;

Bitfield ::= CONST
    {: RESULT = "const"; :}
    | VOLATILE
    {: RESULT = "volatile"; :}
    | EXTERN
    {: RESULT = "extern"; :}
    | STATIC
    {: RESULT = "static"; :}
    | AUTO
    {: RESULT = "auto"; :}
    | REGISTER
    {: RESULT = "register"; :}
    ;

Exp ::= IntExp:i
    {: RESULT = i; :}
    | StringExp:s
    {: RESULT = s; :}
    | VarExp:v
    {: RESULT = v; :}
    | OpExp:o
    {: RESULT = o; :}
    | Call:f
    {: RESULT = f; :}
    | If:i
    {: RESULT = i; :}
    | WHILE:w LPAREN Exp:test RPAREN Exp:body
    {: RESULT = new Absyn.WhileExp(wleft, test, body); :}
    | DO:d Exp:body WHILE LPAREN Exp:test RPAREN SEMICOLON
    {: RESULT = new Absyn.WhileExp(dleft, test, body); :}
    | FOR:f LPAREN VAR ID:n ASSIGN:a Exp:i TO Exp:hi RPAREN Exp:body
    {: Absyn.VarDec var = new Absyn.VarDec(nleft, Symbol.Symbol.symbol(n),
                                          new Absyn.NameTy(nleft, Symbol.Symbol.symbol("int")), i);
       RESULT = new Absyn.ForExp(fleft, var, hi, body); :}
    | BREAK:b SEMICOLON
    {: RESULT = new Absyn.BreakExp(bleft); :}
    | CONTINUE:c SEMICOLON
    {: RESULT = new Absyn.NilExp(cleft); :}
    | RETURN:r Exp:e SEMICOLON
    {: RESULT = e; :}
    | RETURN:r SEMICOLON
    {: RESULT = new Absyn.NilExp(rleft); :}
    | Seq:c
    {: RESULT = c; :}
    | Nil:n
    {: RESULT = n; :}
    ;

DoWhile ::= DO Exp:body WHILE LPAREN Exp:test RPAREN SEMICOLON
    {: RESULT = new Absyn.WhileExp(doleft, test, body); :}
    ;

Break ::= BREAK:b SEMICOLON
    {: RESULT = new Absyn.BreakExp(bleft); :}
    ;

Continue ::= CONTINUE:c SEMICOLON
    {: RESULT = null; :}
    ;

Return ::= RETURN:r Exp:e SEMICOLON
    {: RESULT = e; :}
    | RETURN:r SEMICOLON
    {: RESULT = new Absyn.NilExp(rleft); :}
    ;

OpExp ::=
    Exp:e1 PLUS:p Exp:e2
    {: RESULT = new Absyn.OpExp(pleft, e1, Absyn.OpExp.PLUS, e2); :}
    | Exp:e1 MINUS:m Exp:e2
    {: RESULT = new Absyn.OpExp(mleft, e1, Absyn.OpExp.MINUS, e2); :}
    | Exp:e1 TIMES:t Exp:e2
    {: RESULT = new Absyn.OpExp(tleft, e1, Absyn.OpExp.MUL, e2); :}
    | Exp:e1 DIVIDE:d Exp:e2
    {: RESULT = new Absyn.OpExp(dleft, e1, Absyn.OpExp.DIV, e2); :}
    | Exp:e1 EQ:eq Exp:e2
    {: RESULT = new Absyn.OpExp(eqleft, e1, Absyn.OpExp.EQ, e2); :}
    | Exp:e1 NEQ:ne Exp:e2
    {: RESULT = new Absyn.OpExp(neleft, e1, Absyn.OpExp.NE, e2); :}
    | Exp:e1 LT:lt Exp:e2
    {: RESULT = new Absyn.OpExp(ltleft, e1, Absyn.OpExp.LT, e2); :}
    | Exp:e1 LE:le Exp:e2
    {: RESULT = new Absyn.OpExp(leleft, e1, Absyn.OpExp.LE, e2); :}
    | Exp:e1 GT:gt Exp:e2
    {: RESULT = new Absyn.OpExp(gtleft, e1, Absyn.OpExp.GT, e2); :}
    | Exp:e1 GE:ge Exp:e2
    {: RESULT = new Absyn.OpExp(geleft, e1, Absyn.OpExp.GE, e2); :}
    | Exp:e1 AND:a Exp:e2
    {: RESULT = new Absyn.OpExp(aleft, e1, Absyn.OpExp.AND, e2); :}
    | Exp:e1 OR:o Exp:e2
    {: RESULT = new Absyn.OpExp(oleft, e1, Absyn.OpExp.OR, e2); :}
    ;

StringExp ::= STRING_LITERAL:s
    {: RESULT = new Absyn.StringExp(sleft, s); :}
    ;

Seq ::= LBRACE ExpList:el RBRACE
{: RESULT = new Absyn.SeqExp(elleft, el); :}
    ;

ExpList ::= Exp:e
    {: RESULT = new Absyn.ExpList(e, null); :}
    | ExpList:el Exp:e
    {: RESULT = new Absyn.ExpList(e, el); :}
    ;

Var ::= SimpleVar:v
    {: RESULT = v; :}
    | FieldVar:v
    {: RESULT = v; :}
    | SubscriptVar:v
    {: RESULT = v; :}
    ;

SimpleVar ::= ID:i
    {: RESULT = new Absyn.SimpleVar(ileft, Symbol.Symbol.symbol(i)); :}
    ;

VarExp ::= Var:v
    {: RESULT = new Absyn.VarExp(vleft, v); :}
    ;

IntExp ::= DECIMAL_LITERAL:n
    {: RESULT = new Absyn.IntExp(nleft, n); :}
    ;

Params ::= LPAREN ParamList:pl RPAREN
    {:
        Absyn.FieldList result = null;
        for(int i = pl.size()-1; i >= 0; i--) {
            Absyn.FieldList fl = (Absyn.FieldList)pl.get(i);
            fl.tail = result;
            result = fl;
        }
        RESULT = result;
    :}
    | LPAREN RPAREN
    {: RESULT = null; :}
    ;

Nil ::= VOID
    {: RESULT = new Absyn.NilExp(0); :}
    ;

Call ::= ID:i LPAREN ExpList:el RPAREN
    {: RESULT = new Absyn.CallExp(ileft, Symbol.Symbol.symbol(i), el); :}
    | ID:i LPAREN RPAREN
    {: RESULT = new Absyn.CallExp(ileft, Symbol.Symbol.symbol(i), null); :}
    ;

If ::= IF:i LPAREN Exp:test RPAREN Exp:then ELSE Exp:else_exp
    {: RESULT = new Absyn.IfExp(ileft, test, then, else_exp); :}
    | IF:i LPAREN Exp:test RPAREN Exp:then
    {: RESULT = new Absyn.IfExp(ileft, test, then); :}
    ;

While ::= WHILE:w LPAREN Exp:test RPAREN Exp:body
    {: RESULT = new Absyn.WhileExp(wleft, test, body); :}
    ;

For ::= FOR:f LPAREN VAR ID:n ASSIGN:a Exp:i TO Exp:hi RPAREN Exp:body
    {: Absyn.VarDec var = new Absyn.VarDec(nleft, Symbol.Symbol.symbol(n),
                                          new Absyn.NameTy(nleft, Symbol.Symbol.symbol("int")), i);
       RESULT = new Absyn.ForExp(fleft, var, hi, body); :}
    ;

FieldVar ::= Var:v DOT ID:i
    {: RESULT = new Absyn.FieldVar(vleft, v, Symbol.Symbol.symbol(i)); :}
    ;

SubscriptVar ::= Var:v LBRACK Exp:e RBRACK
    {: RESULT = new Absyn.SubscriptVar(vleft, v, e); :}
    ;

StructDecList ::= Type:t ID:n SEMICOLON
    {: ArrayList<Absyn.FieldList> list = new ArrayList<>();
       list.add(new Absyn.FieldList(tleft, Symbol.Symbol.symbol(n), t.name, null));
       RESULT = list; :}
    | StructDecList:sl Type:t ID:n SEMICOLON
    {: sl.add(new Absyn.FieldList(tleft, Symbol.Symbol.symbol(n), t.name, null));
       RESULT = sl; :}
    ;

EnumList ::= ID:i
    {: ArrayList<String> list = new ArrayList<>();
       list.add(i);
       RESULT = list; :}
    | EnumList:el COMMA ID:i
    {: el.add(i);
       RESULT = el; :}
    | ID:i ASSIGN Exp:e
    {: ArrayList<String> list = new ArrayList<>();
       list.add(i);
       RESULT = list; :}
    | EnumList:el COMMA ID:i ASSIGN Exp:e
    {: el.add(i);
       RESULT = el; :}
    ;